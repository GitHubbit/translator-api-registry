openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the BioThings iDISK (integrated Dietary Supplement Knowledge Base) query web services.
  termsOfService: https://biothings.io/about
  title: BioThings iDISK API
  version: '2020-02-14'
  x-translator:
    infores: "infores:biothings-idisk"
    component: KP
    team:
      - Service Provider
    biolink-version: "3.0.3"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/idisk
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/idisk
  x-maturity: production
tags:
- name: chemical
- name: disease
- name: umls
- name: phenotype
- name: query
- name: translator
- name: biothings
paths:
  "/umls/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "UMLS:C4101693"
        ## has prefix, UMLS ID for the supplement
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/umls'
      #   '404':
      #     description: A response indicating an unknown umls ID
      # summary: Retrieve umls objects based on ID
      tags:
      - umls
  "/umls":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
            ## has prefix, UMLS ID for the supplement
              ids:
              - "UMLS:C4101693"
              - "UMLS:C2648396"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple UMLS IDs for supplements separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      tags:
      - umls
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: Query string.
        in: query
        required: true
        example: is_effective_for.umls:"C0747771"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "C0747771"
              - "C0009324"
              scopes:
              - "is_effective_for.umls"
            schema:
              type: object
              properties:
                q:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      summary: Make batch umls queries and return matching umls hits
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_effect_on'
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_effect_on-rev'
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_reaction'
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_reaction-rev'
      - $ref: '#/components/x-bte-kgs-operations/interacts_with'
      - $ref: '#/components/x-bte-kgs-operations/interacts_with-rev'
      - $ref: '#/components/x-bte-kgs-operations/is_effective_for'
      - $ref: '#/components/x-bte-kgs-operations/is_effective_for-rev'
      tags:
      - query
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  # schemas:
  #   umls:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/umls'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/umls'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## SRI-ID-Resolver has issues with the UMLS chemical IDs.
  ##   some are thought to be Protein/Polypeptides...
  ##   many aren't resolved at all...
  ## reference for data: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7075538/
    has_adverse_effect_on:
    ## there are 626 records with the has_adverse_effect_on field
    ## the dietary supplement has an adverse effect (that can be categorized into this class of diseases)
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: umls
        header: application/x-www-form-urlencoded
      outputs:
      - id: MEDDRA
        semantic: Disease
      parameters:
        ## no prefix on output id
        fields: has_adverse_effect_on.meddra,has_adverse_effect_on.source.name
        size: 1000  ## size limit; just in case
      ## biolink 2.4.8: used causes_adverse_event
      predicate: has_adverse_event
      ## iDISK got all these relations from NMCD: Natural Medicines Comprehensive Database 
      ## ref:  Table 3 of the linked publication, or by comparing number of records total with 
      ##   the number of records from https://biothings.ncats.io/idisk/query?q=has_adverse_effect_on.source.name:%22NMCD%22
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_adverse_effect_on'
      # testExamples:
      #   - qInput: "UMLS:C0000392"       ## beta-Alanine
      #     oneOutput: "MEDDRA:10017947"  ## gastrointestinal disorders
    has_adverse_effect_on-rev:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: MEDDRA
        semantic: Disease
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: has_adverse_effect_on.meddra
        header: application/x-www-form-urlencoded
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      parameters:
        fields: umls  ## no prefix
        size: 1000    ## note size limit
      predicate: adverse_event_of
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
      # testExamples:
      #   - qInput: "MEDDRA:10017947"     ## gastrointestinal disorders 
      #     oneOutput: "UMLS:C0000392"    ## beta-Alanine
    has_adverse_reaction:
    ## there are 204 records with the has_adverse_reaction field
    ## the dietary supplement has an adverse effect/reaction (specific sign/symptom)
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: umls
        header: application/x-www-form-urlencoded
      outputs:
      - id: UMLS
        semantic: PhenotypicFeature  ## use this or Disease?
        ## SRI-ID-resolver is resolving these to PhenotypicFeature
        ##   example: https://nodenormalization-sri.renci.org/1.2/get_normalized_nodes?curie=UMLS%3AC0027497&conflate=true
        ## don't create two operations or records will duplicate for DiseaseOrPhenotypicFeature query
      parameters:
        ## no prefix on output id
        fields: has_adverse_reaction.umls,has_adverse_reaction.source.name
        size: 1000  ## size limit; just in case
      ## biolink 2.4.8: used causes_adverse_event
      predicate: has_adverse_event
      ## iDISK got all these relations from MSKCC: “About Herbs” page on the Memorial Sloan Kettering Cancer Center (MSKCC) website 
      ## ref:  Table 3 of the linked publication, or by comparing number of records total with 
      ##   the number of records from https://biothings.ncats.io/idisk/query?q=has_adverse_reaction.source.name:%22MSKCC%22
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_adverse_reaction'
      # testExamples:
      #   - qInput: "UMLS:C0000578"     ## 5-Hydroxytryptophan
      #     oneOutput: "UMLS:C0027497"  ## nausea
    has_adverse_reaction-rev:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: UMLS
        semantic: PhenotypicFeature
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: has_adverse_reaction.umls
        header: application/x-www-form-urlencoded
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      parameters:
        fields: umls  ## no prefix
        size: 1000    ## note size limit
      predicate: adverse_event_of
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
      # testExamples:
      #   - qInput: "UMLS:C0027497"       ## nausea 
      #     oneOutput: "UMLS:C0000578"    ## 5-Hydroxytryptophan
    interacts_with:
    ## there are 673 records with the interacts_with field 
    ##   most use NMCD (604), but some use MSKCC (178). Some records must have both?
    ## the dietary supplement interacts with a pharmaceutical drug
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: umls
        header: application/x-www-form-urlencoded
      outputs:
      - id: UMLS
        semantic: SmallMolecule  
      parameters:
        ## no prefix on output id
        fields: interacts_with.umls,interacts_with.source.name
        size: 1000  ## size limit; just in case
      predicate: interacts_with  ## closest biolink predicate?
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/interacts_with'
      # testExamples:
      #   - qInput: "UMLS:C0000473"     ## 4-Aminobenzoic Acid
      #     oneOutput: "UMLS:C0010137"  ## Cortisone
    interacts_with-rev:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: interacts_with.umls
        header: application/x-www-form-urlencoded
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      parameters:
        fields: umls
        size: 1000  ## note size limit
      predicate: interacts_with
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
      # testExamples:
      #   - qInput: "UMLS:C0010137"      ## Cortisone 
      #     oneOutput: "UMLS:C0000473"   ## 4-Aminobenzoic Acid
    is_effective_for:
    ## there are 654 records with the is_effective_for field 
    ##   most use NMCD (552), but some use MSKCC (238). Some records must have both?
    ## the dietary supplement is said to treat disease/condition or may be used for it...
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: umls
        header: application/x-www-form-urlencoded
      outputs:
      - id: UMLS
        semantic: Disease    ## use this or PhenotypicFeature?
        ## this example is a Disease: https://nodenormalization-sri.renci.org/1.2/get_normalized_nodes?curie=UMLS%3AC0016053&conflate=true
        ## don't create two operations or records will duplicate for DiseaseOrPhenotypicFeature query
      parameters:
        fields: is_effective_for.umls,is_effective_for.source.name
        size: 1000  ## size limit; just in case
      predicate: treats  ## closest biolink predicate?
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/is_effective_for'
      # testExamples:
      #   - qInput: "UMLS:C0000503"      ## gamma hydroxybutyrate 
      #     oneOutput: "UMLS:C0016053"   ## Fibromyalgias
    is_effective_for-rev:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: UMLS
        semantic: Disease
      requestBody:
        body:
          ## API data has no prefix
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: is_effective_for.umls
        header: application/x-www-form-urlencoded
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      parameters:
        fields: umls
        size: 1000  ## note size limit
      predicate: treated_by
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
      # testExamples:
      #   - qInput: "UMLS:C0016053"   ## Fibromyalgias 
      #     oneOutput: "UMLS:C0000503"      ## gamma hydroxybutyrate 
  x-bte-response-mapping:
  ## name not included since BTE doesn't ingest it right now...
    has_adverse_effect_on:
      MEDDRA: has_adverse_effect_on.meddra
      idisk_source: has_adverse_effect_on.source.name
    rev:
      ## could also include the name field (as "original subject name"?)
      UMLS: umls
    has_adverse_reaction:
      UMLS: has_adverse_reaction.umls
      idisk_source: has_adverse_reaction.source.name
    interacts_with:
      UMLS: interacts_with.umls
      idisk_source: interacts_with.source.name
    is_effective_for:
      UMLS: is_effective_for.umls
      idisk_source: is_effective_for.source.name
