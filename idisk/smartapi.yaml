openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the BioThings iDISK (integrated Dietary Supplement Knowledge Base) query web services.
  termsOfService: https://biothings.io/about
  title: BioThings iDISK API
  version: '1.0'
  x-translator:
    infores: "infores:biothings-idisk"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.3"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/idisk
- description: Production server
  url: http://biothings.ncats.io/idisk
tags:
- name: chemical
- name: disease
- name: umls
- name: phenotype
- name: query
- name: translator
- name: biothings
paths:
  /umls:
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple chemical UMLS IDs separated by comma. Note
                    that currently we only take the input ids up to 1000 maximum,
                    the rest will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/umls'
                type: array
          description: A list of matching umls objects
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: For a list of chemical UMLS IDs, return the matching umls object
      tags:
      - umls
  /umls/{umlsid}:
    get:
      parameters:
      - description: Retrieve umls objects based on chemical UMLS ID.  Supports
          JSONP and CORS as well.
        example: UMLS:C0005380
        in: path
        name: umlsid
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/umls'
          description: A matching umls object
        '404':
          description: A response indicating an unknown umls ID
      summary: Retrieve umls objects based on ID
      tags:
      - umls
  /metadata:
    get:
      parameters:
      - $ref: '#/components/parameters/callback'
        in: query
        name: callback
      responses:
        '200':
          description: iDISK metadata object
      summary: Get metadata about the data available from BioThings iDISK API
      tags:
      - metadata
  /metadata/fields:
    get:
      parameters:
      - $ref: '#/components/parameters/search'
        name: search
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/prefix'
        name: prefix
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          description: iDISK metadata fields object
      summary: Get metadata about the data fields available
        object
      tags:
      - metadata
  /query:
    get:
      parameters:
      - description: Query string.
        example: is_effective_for.umls:"UMLS:C0020538"
        in: query
        name: q
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/facet_size'
        name: facet_size
      - $ref: '#/components/parameters/sort'
        name: sort
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/facets'
        name: facets
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/from'
        name: from
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make queries and return matching umls hits. Supports JSONP and CORS
        as well.
      tags:
      - query
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPOSTResult'
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make batch umls queries and return matching umls hits
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_effect_on'
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_effect_on-rev'
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_reaction'
      - $ref: '#/components/x-bte-kgs-operations/has_adverse_reaction-rev'
      - $ref: '#/components/x-bte-kgs-operations/interacts_with'
      - $ref: '#/components/x-bte-kgs-operations/interacts_with-rev'
      - $ref: '#/components/x-bte-kgs-operations/is_effective_for'
      - $ref: '#/components/x-bte-kgs-operations/is_effective_for-rev'
      tags:
      - query
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned chem object. If "true" or "1",
        all fields will be collapsed into a single level deep object (all nested objects
        will be a single level deep, using dotfield notation to signify the nested
        structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching chem hit(s). The supported field
        names can be found from any chem object or from the /metadata/fields endpoint.
        If "fields=all", all available fields will be returned. Type: string (list).
        Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching chem hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching chem hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    umls:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - $ref: '#/components/schemas/umls'
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            $ref: '#/components/schemas/umls'
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-kgs-operations:
  ## SRI-ID-Resolver has issues with the UMLS chemical IDs.
  ##   some are thought to be Protein/Polypeptides...
  ##   many aren't resolved at all...
  ## reference for data: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7075538/
    has_adverse_effect_on:
    ## there are 626 records with the has_adverse_effect_on field
    ## the dietary supplement has an adverse effect (that can be categorized into this class of diseases)
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: has_adverse_effect_on
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put C0000392 (beta-Alanine)
          ##   should get 10017947 (gastrointestinal disorders) back
          scopes: umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      outputs:
      - id: MEDDRA
        semantic: Disease
      predicate: causes_adverse_event  ## closest biolink predicate?
      ## iDISK got all these relations from NMCD: Natural Medicines Comprehensive Database 
      ## ref:  Table 3 of the linked publication, or by comparing number of records total with 
      ##   the number of records from https://biothings.ncats.io/idisk/query?q=has_adverse_effect_on.source.name:%22NMCD%22
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_adverse_effect_on'
    has_adverse_effect_on-rev:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: umls
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put 10017947 (gastrointestinal disorders) 
          ##   should get C0000392 (beta-Alanine) back
          scopes: has_adverse_effect_on.meddra
        header: application/x-www-form-urlencoded
      inputs:
      - id: MEDDRA
        semantic: Disease
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      predicate: adverse_event_caused_by
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
    has_adverse_reaction:
    ## there are 204 records with the has_adverse_reaction field
    ## the dietary supplement has an adverse effect/reaction (specific sign/symptom)
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: has_adverse_reaction
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put C0000578 (5-Hydroxytryptophan) 
          ##   should get C0027497 (nausea) back
          scopes: umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      outputs:
      - id: UMLS
        semantic: PhenotypicFeature  ## use this or Disease?
        ## SRI-ID-resolver is resolving these to PhenotypicFeature
        ##   examples: https://nodenormalization-sri-dev.renci.org/1.1/get_normalized_nodes?curie=UMLS%3AC0455384&curie=UMLS%3AC0018681
        ## don't create two operations or records will duplicate for DiseaseOrPhenotypicFeature query
      predicate: causes_adverse_event  ## closest biolink predicate?
      ## iDISK got all these relations from MSKCC: “About Herbs” page on the Memorial Sloan Kettering Cancer Center (MSKCC) website 
      ## ref:  Table 3 of the linked publication, or by comparing number of records total with 
      ##   the number of records from https://biothings.ncats.io/idisk/query?q=has_adverse_reaction.source.name:%22MSKCC%22
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_adverse_reaction'
    has_adverse_reaction-rev:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: umls
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put C0027497 (nausea) 
          ##   should get C0000578 (5-Hydroxytryptophan) back
          scopes: has_adverse_reaction.umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: PhenotypicFeature  ## use this or Disease?
        ## SRI-ID-resolver is resolving these to PhenotypicFeature
        ##   examples: https://nodenormalization-sri-dev.renci.org/1.1/get_normalized_nodes?curie=UMLS%3AC0455384&curie=UMLS%3AC0018681
        ## don't create two operations or records will duplicate for DiseaseOrPhenotypicFeature query
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      predicate: adverse_event_caused_by
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
    interacts_with:
    ## there are 673 records with the interacts_with field 
    ##   most use NMCD (604), but some use MSKCC (178). Some records must have both?
    ## the dietary supplement interacts with a pharmaceutical drug
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: interacts_with
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put C0000473 (4-Aminobenzoic Acid) 
          ##   should get C0010137 (Cortisone) back
          scopes: umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      outputs:
      - id: UMLS
        semantic: SmallMolecule  
      predicate: interacts_with  ## closest biolink predicate?
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/interacts_with'
    interacts_with-rev:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: umls
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put C0010137 (Cortisone) 
          ##   should get C0000473 (4-Aminobenzoic Acid) back
          scopes: interacts_with.umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      predicate: interacts_with
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
    is_effective_for:
    ## there are 654 records with the is_effective_for field 
    ##   most use NMCD (552), but some use MSKCC (238). Some records must have both?
    ## the dietary supplement is said to treat disease/condition or may be used for it...
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: is_effective_for
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put C0000503 (gamma hydroxybutyrate) 
          ##   should get C0016053 (Fibromyalgias) back
          scopes: umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: SmallMolecule
      outputs:
      - id: UMLS
        semantic: Disease    ## use this or PhenotypicFeature?
        ## don't create two operations or records will duplicate for DiseaseOrPhenotypicFeature query
      predicate: treats  ## closest biolink predicate?
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/is_effective_for'
    is_effective_for-rev:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: umls
        size: 1000
      requestBody:
        body:
          q: '{inputs[0]}'
          ## example: put C0016053 (Fibromyalgias) 
          ##   should get C0000503 (gamma hydroxybutyrate) back
          scopes: is_effective_for.umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: Disease
      outputs:
      - id: UMLS
        semantic: SmallMolecule
      predicate: treated_by
      source: "infores:idisk"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/rev'
  x-bte-response-mapping:
    has_adverse_effect_on:
      MEDDRA: has_adverse_effect_on.meddra
      name: has_adverse_effect_on.name
      source: has_adverse_effect_on.source.name
    rev:
      UMLS: umls
    has_adverse_reaction:
      UMLS: has_adverse_reaction.umls
      name: has_adverse_reaction.name
      source: has_adverse_reaction.source.name
    interacts_with:
      UMLS: interacts_with.umls
      name: interacts_with.name
      source: interacts_with.source.name
    is_effective_for:
      UMLS: is_effective_for.umls
      name: is_effective_for.name
      source: is_effective_for.source.name
