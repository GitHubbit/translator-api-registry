openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: Chunlei Wu
    x-id: https://github.com/newgene
    x-role: responsible developer
  x-translator:
    infores-curie: "infores:mydisease-info"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.3"
  description: Documentation of the MyDisease.info disease query web services.  Learn
    more about [mydisease.info](http://mydisease.info/)
  termsOfService: http://mydisease.info/terms
  title: MyDisease.info API
  version: '1.0'
servers:
- description: Production server
  url: http://mydisease.info/v1
tags:
- name: disease
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/disease":
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple disease IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Disease"
                type: array
          description: A list of matching disease objects
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: For a list of disease IDs, return the matching disease object
      tags:
      - disease
  "/disease/{diseaseid}":
    get:
      parameters:
      - description: Retrieve disease objects based on ID
        example: MONDO:0016575
        in: path
        name: diseaseid
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Disease"
          description: A matching disease object
        '404':
          description: A response indicating an unknown disease ID
      summary: Retrieve disease objects based on ID
      tags:
      - disease
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/callback"
        in: query
        name: callback
      responses:
        '200':
          description: mydisease.info metadata object
      summary: Get metadata about the data available from mydisease.info
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/search"
        name: search
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/prefix"
        name: prefix
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          description: mydisease.info metadata fields object
      summary: Get metadata about the data fields available from a mydisease.info
        chem object
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - description: 'Query string.  The detailed query syntax can be found from our
          [docs](http://mydisease.info).  Examples: "cancer", "primary ciliary dyskinesia",
          "DOID:9562"'
        example: cancer
        in: query
        name: q
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/facet_size"
        name: facet_size
      - "$ref": "#/components/parameters/sort"
        name: sort
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/facets"
        name: facets
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/from"
        name: from
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryResult"
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make disease queries and return matching disease hits. Supports JSONP
        and CORS as well.
      tags:
      - query
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryPOSTResult"
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make batch disease queries and return matching disease hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/disease-gene"
      - "$ref": "#/components/x-bte-kgs-operations/disease-variant"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype"
      - "$ref": "#/components/x-bte-kgs-operations/disease-phenotype2"
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical"
      - "$ref": "#/components/x-bte-kgs-operations/disease-chemical2"
#       - "$ref": "#/components/x-bte-kgs-operations/disease-pathway"
#       - "$ref": "#/components/x-bte-kgs-operations/disease-pathway2"
      - "$ref": "#/components/x-bte-kgs-operations/gene-disease"
      - "$ref": "#/components/x-bte-kgs-operations/variant-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype-disease2"
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease"
      - "$ref": "#/components/x-bte-kgs-operations/chemical-disease2"
#       - "$ref": "#/components/x-bte-kgs-operations/pathway-disease"
#       - "$ref": "#/components/x-bte-kgs-operations/pathway-disease2"
      - "$ref": "#/components/x-bte-kgs-operations/has_subclass"
      - "$ref": "#/components/x-bte-kgs-operations/subclass_of"
      - "$ref": "#/components/x-bte-kgs-operations/predisposes_towards"
      - "$ref": "#/components/x-bte-kgs-operations/predisposes_towards-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_shares_features_of"
      - "$ref": "#/components/x-bte-kgs-operations/disease_shares_features_of-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_major_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_major_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_has_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_causes_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_causes_feature-rev"
      - "$ref": "#/components/x-bte-kgs-operations/disease_arises_from_feature"
      - "$ref": "#/components/x-bte-kgs-operations/disease_arises_from_feature-rev"
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned disease object. If "true" or
        "1", all fields will be collapsed into a single level deep object (all nested
        objects will be a single level deep, using dotfield notation to signify the
        nested structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching disease hit(s). The supported
        field names can be found from any disease object or from the /metadata/fields
        endpoint. If "fields=all", all available fields will be returned. Type: string
        (list). Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching disease hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching disease hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Disease:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - "$ref": "#/components/schemas/Disease"
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            "$ref": "#/components/schemas/Disease"
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-response-mapping:
    ## not including "name" field since BTE isn't ingesting / using it to annotate nodes...
    disease-gene:
      NCBIGene: disgenet.genes_related_to_disease.gene_id  ## no prefix
      pubmed: disgenet.genes_related_to_disease.pubmed     ## no prefix
      source: disgenet.genes_related_to_disease.source
      ## could remove "disgenet-" prefix from the key
      ##  if the key becomes the TRAPI attribute "original_attribute_name"
      disgenet-DPI: disgenet.genes_related_to_disease.DPI
      disgenet-DSI: disgenet.genes_related_to_disease.DSI
      disgenet-score: disgenet.genes_related_to_disease.score
    disease-variant:
      DBSNP: disgenet.variants_related_to_disease.rsid       ## no prefix
      pubmed: disgenet.variants_related_to_disease.pubmed    ## no prefix
      source: disgenet.variants_related_to_disease.source
      ## could remove "disgenet-" prefix from the key
      ##  if the key becomes the TRAPI attribute "original_attribute_name"
      disgenet-DPI: disgenet.variants_related_to_disease.DPI
      disgenet-DSI: disgenet.variants_related_to_disease.DSI
      disgenet-score: disgenet.variants_related_to_disease.score
    disease-phenotype:
      HP: hpo.phenotype_related_to_disease.hpo_id             ## HAS PREFIX (HP)
      ## note: there are 6 reference-related fields (parser created based on ID namespace)
      pubmed: hpo.phenotype_related_to_disease.pmid_refs                 ## HAS PREFIX (PMID)
      isbn_refs: hpo.phenotype_related_to_disease.isbn_refs              ## HAS PREFIX (ISBN)
      website_refs: hpo.phenotype_related_to_disease.website_refs        ## no prefix
      decipher_refs: hpo.phenotype_related_to_disease.decipher_refs      ## HAS PREFIX (DECIPHER)
      omim_refs: hpo.phenotype_related_to_disease.omim_refs              ## HAS PREFIX (OMIM)
      orphanet_refs: hpo.phenotype_related_to_disease.orphanet_refs      ## HAS PREFIX (ORPHANET)
      ## note: there are 4 frequency-related fields (parser created based on different data types)
      numeric_freq: hpo.phenotype_related_to_disease.numeric_freq           ## decimal freq
      hp_freq: hpo.phenotype_related_to_disease.hp_freq                     ## HP ontology freq term
      freq_numerator: hpo.phenotype_related_to_disease.freq_numerator       ## frequency as a fraction (numerator)
      freq_denominator: hpo.phenotype_related_to_disease.freq_denominator   ## frequency as a fraction (denominator)
      ## value of this field is evidence codes (IEA, TAS, PCS)
      evidence: hpo.phenotype_related_to_disease.evidence
      ## modifier/sex fields provide context...only in some disease-phenotype records...
      modifier: hpo.phenotype_related_to_disease.modifier
      sex: hpo.phenotype_related_to_disease.sex
      biocuration: hpo.phenotype_related_to_disease.biocuration
    disease-chemical:
      MESH: ctd.chemical_related_to_disease.mesh_chemical_id    ## no prefix
      ## direct_evidence has two values, 'marker/mechanism' or 'therapeutic'
      direct_evidence: ctd.chemical_related_to_disease.direct_evidence
      pubmed: ctd.chemical_related_to_disease.pubmed     ## no prefix
#     disease-pathway:  
#       REACT: ctd.pathway_related_to_disease.react_pathway_id
#     disease-pathway2:  
#       KEGG: ctd.pathway_related_to_disease.kegg_pathway_id
    umls:
      UMLS: disgenet.xrefs.umls     ## no prefix
    omim:
      OMIM: hpo.omim  ## no prefix
    orphanet:
      ORPHANET: hpo.orphanet  ## no prefix
    mondo:  ## added for a bunch of operations
      MONDO: mondo.mondo  ## HAS PREFIX (MONDO)
    ctd-mesh-disease:  ## added for chemical-disease operation
      MESH: ctd.mesh  ## no prefix
    ctd-omim-disease:  ## added for chemical-disease2 operation
      OMIM: ctd.omim  ## no prefix
    has_subclass:
      MONDO: mondo.children    ## HAS PREFIX (MONDO)
    subclass_of:
      MONDO: mondo.parents    ## HAS PREFIX (MONDO)
    predisposes_towards:
      MONDO: mondo.predisposes_towards.mondo    ## HAS PREFIX (MONDO)
    disease_shares_features_of:
      MONDO: mondo.disease_shares_features_of.mondo    ## HAS PREFIX (MONDO)
    disease_has_major_feature:
      MONDO: mondo.disease_has_major_feature.mondo    ## HAS PREFIX (MONDO)
    disease_has_feature:
      MONDO: mondo.disease_has_feature.mondo    ## HAS PREFIX (MONDO)
    disease_causes_feature:
      MONDO: mondo.disease_causes_feature.mondo    ## HAS PREFIX (MONDO)
    disease_arises_from_feature:
      MONDO: mondo.disease_arises_from_feature.mondo    ## HAS PREFIX (MONDO)
  x-bte-kgs-operations:
  ## for disgenet-based operations:
  ## - the ingested data structure doesn't give a specific relation...
  ##   and trying to get a specific relation is hard
  ##   (going thru source -> ontology class -> trying to find a matching ontology property)
  ## - there are numeric measures, not in response-mapping right now
    disease-gene:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.genes_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put C0023264 here (Leigh Disease).
          ##   should get NCBIGene:4694 (NDUFA1) in response
          scopes: disgenet.xrefs.umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: Disease
      outputs:
      - id: NCBIGene
        semantic: Gene
      predicate: related_to
      source: "infores:disgenet"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-gene"
    disease-variant:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.variants_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put C0023264 here (Leigh Disease)
          ##   should get rs1161932777 in response
          scopes: disgenet.xrefs.umls
        header: application/x-www-form-urlencoded
      inputs:
      - id: UMLS
        semantic: Disease
      outputs:
      - id: DBSNP
        semantic: SequenceVariant
      predicate: related_to
      source: "infores:disgenet"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-variant"
  ## for hpo-annotation-based operations:
  ## - currently, the mydisease parser for hpo maps the resources' IDs (OMIM or ORPHANET) to MONDO. If two IDs (ex: OMIM:218340 and ORPHANET:1777 for Temtamy syndrome) map to the same MONDO ID, it looks like only the OMIM data was kept.
  ##   However, then data is missing: in the raw data, those two IDs have different sets of annotated phenotypes...
  ##   Change to keep both IDs and their records, or merge them?
  ## - there is DECIPHER-ID-based disease-pheno info that isn't captured by BTE right now
  ##   this is not much info (~22 diseases)
    disease-phenotype:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.phenotype_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put 246900 here (Dihydrolipoamide Dehydrogenase Deficiency)
          ##   should get HP:0001254 (Lethargy) in response
          scopes: hpo.omim
        header: application/x-www-form-urlencoded
      inputs:
      - id: OMIM
        semantic: Disease
      outputs:
      - id: HP
        semantic: PhenotypicFeature
      predicate: has_phenotype
      ## sort-of has a relation. Parser made this based on annotations with aspect == "P"
      ##   (notice aspect as "I" became hpo.inheritance, "C" became hpo.course, "M" became hpo.modifier)
      source: "infores:hpo-annotations"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
    disease-phenotype2:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.phenotype_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put 881 here (Turner Syndrome)
          ##   should get HP:0000137 (Abnormality of the ovary) in response
          scopes: hpo.orphanet
        header: application/x-www-form-urlencoded
      inputs:
      - id: ORPHANET
        semantic: Disease
      outputs:
      - id: HP
        semantic: PhenotypicFeature
      predicate: has_phenotype
      source: "infores:hpo-annotations"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
  ## for ctd-based operations:
  ## - when the mydisease parser maps the resources' IDs to MONDO, are there situations where a MESH and a OMIM ID map to the same MONDO? 
  ##   If so, 1) Is only one of them kept?, 
  ##          2) Do those IDs have different data linked to them? (so data is missing with the current behavior)
  ##   From what I can tell, CTD does their own entity resolution. 
  ##   If a disease has MESH and OMIM IDs, the raw data has its info under the MESH ID only. The OMIM ID is only used as the main disease ID if there isn't a matching MESH ID
  ## - we wanted to add CTD direct disease-gene data, operations
  ## - we commented out CTD disease-pathway data because that info is all indirect
    disease-chemical:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.chemical_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put D009102 here (Multiple Organ Failure)
          ##   should get C448659 (17-(dimethylaminoethylamino)-17-demethoxygeldanamycin, aka ALVESPIMYCIN) in response
          scopes: ctd.mesh
        header: application/x-www-form-urlencoded
      inputs:
      - id: MESH
        semantic: Disease
      outputs:
      - id: MESH
        semantic: SmallMolecule
        ## note that 3085 / 3253 have cas_registry_number field that can be used as well
      predicate: related_to
      ## there is a field that kinda tells the "relation" IN response-mapping right now
      ##   (direct_evidence can have value "marker/mechanism" or "therapeutic").
      source: "infores:ctd"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-chemical"
    disease-chemical2:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.chemical_related_to_disease
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put 146850 here (IMMUNE SUPPRESSION)
          ##   should get D014810 (Vitamin E) in response
          scopes: ctd.omim
        header: application/x-www-form-urlencoded
      inputs:
      - id: OMIM
        semantic: Disease
      outputs:
      - id: MESH
        semantic: SmallMolecule
        ## note that 3085 / 3253 have cas_registry_number field that can be used as well
      predicate: related_to
      ## there is a field that kinda tells the "relation" IN response-mapping right now
      ##   (direct_evidence can have value "marker/mechanism" or "therapeutic").
      source: "infores:ctd"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-chemical"        
#     disease-pathway:  ## input is MESH Disease, example: put C536029 here
#     ## output is REACT pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.mesh
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: MESH
#         semantic: Disease
#       outputs:  
#       - id: REACT
#         semantic: Pathway      
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway" 
#     ## output is KEGG pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.mesh
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: MESH
#         semantic: Disease
#       outputs:  
#       - id: KEGG
#         semantic: Pathway      
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway2"           
#     disease-pathway2:  ## input is OMIM Disease, example: put 261515 here
#     ## output is REACT pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.omim
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: OMIM
#         semantic: Disease
#       outputs:  
#       - id: REACT
#         semantic: Pathway      
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway" 
#     ## output is KEGG pathway ID
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.pathway_related_to_disease
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.omim
#         header: application/x-www-form-urlencoded
#       inputs:
#       - id: OMIM
#         semantic: Disease
#       outputs:  
#       - id: KEGG
#         semantic: Pathway      
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/disease-pathway2"
##########################################################################
## for "reverse" querying, we currently can't retrieve the other info in the specific record like reference info...
    gene-disease:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.xrefs.umls
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## no prefix
          ## example: put 1629 here (DBT)
          ##   should get C3658290 in response (Drug-Induced Acute Liver Injury)
          scopes: disgenet.genes_related_to_disease.gene_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: NCBIGene
        semantic: Gene
      outputs:
      - id: UMLS
        semantic: Disease
      predicate: related_to
      source: "infores:disgenet"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/umls"
    variant-disease:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: disgenet.xrefs.umls
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## no prefix
          ## example: put rs78655421 here
          ##   should get C4021107 in response (Non-obstructive azoospermia)
          scopes: disgenet.variants_related_to_disease.rsid
        header: application/x-www-form-urlencoded
      inputs:
      - id: DBSNP
        semantic: SequenceVariant
      outputs:
      - id: UMLS
        semantic: Disease
      predicate: related_to
      source: "infores:disgenet"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/umls"
    phenotype-disease:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.omim
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (HP)
          ## example: put HP:0000224 here (Hypogeusia)
          ##   should get 608720 in response (Neuropathy, Hereditary Sensory And Autonomic, Adult-onset, With Anosmia)
          scopes: hpo.phenotype_related_to_disease.hpo_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: HP
        semantic: PhenotypicFeature
      outputs:
      - id: OMIM
        semantic: Disease
      predicate: phenotype_of
      source: "infores:hpo-annotations"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/omim"
    phenotype-disease2:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: hpo.orphanet
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (HP)
          ## example: put HP:0000224 here (Hypogeusia)
          ##   should get 99857 in response (Secondary Syringomyelia)         
          scopes: hpo.phenotype_related_to_disease.hpo_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: HP
        semantic: PhenotypicFeature
      outputs:
      - id: ORPHANET
        semantic: Disease
      predicate: phenotype_of
      source: "infores:hpo-annotations"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/orphanet"
    chemical-disease:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.mesh
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put D000655 here (Amodiaquine)
          ##   should get D008288 in response (Malaria) (maps to MONDO:0005136)
          scopes: ctd.chemical_related_to_disease.mesh_chemical_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: MESH
        semantic: SmallMolecule
      outputs:
      - id: MESH
        semantic: Disease
      predicate: related_to
      source: "infores:ctd"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
    chemical-disease2:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: ctd.omim
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"    ## no prefix
          ## example: put D000655 here (Amodiaquine)
          ##   should get 248310 in response (PLASMODIUM FALCIPARUM BLOOD INFECTION LEVEL) (maps to MONDO:0009553)
          scopes: ctd.chemical_related_to_disease.mesh_chemical_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: MESH
        semantic: SmallMolecule
      outputs:
      - id: OMIM
        semantic: Disease
      predicate: related_to
      source: "infores:ctd"
      response_mapping: 
        "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease"  
#     pathway-disease:  ## input is REACT pathway ID, example: put R-HSA-1280218 or R-HSA-5619084 here  
#     ## output is MESH Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.mesh  ## note the size limit
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.react_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: REACT
#         semantic: Pathway
#       outputs:
#       - id: MESH
#         semantic: Disease
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
#     ## output is OMIM Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.omim  ## note the size limit
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.react_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: REACT
#         semantic: Pathway
#       outputs:
#       - id: OMIM
#         semantic: Disease
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease" 
#     pathway-disease2:  ## input is KEGG pathway ID, example: put hsa04360 or hsa00230 here  
#     ## output is MESH Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.mesh  ## note the size limit
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.kegg_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: KEGG
#         semantic: Pathway
#       outputs:
#       - id: MESH
#         semantic: Disease
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-mesh-disease"
#     ## output is OMIM Disease
#     - supportBatch: true
#       inputSeparator: ","
#       parameters:
#         fields: ctd.omim  ## note the size limit
#         size: '1000'
#       requestBody:
#         body:
#           q: "{inputs[0]}"
#           scopes: ctd.pathway_related_to_disease.kegg_pathway_id
#         header: application/x-www-form-urlencoded
#       inputs:  
#       - id: KEGG
#         semantic: Pathway
#       outputs:
#       - id: OMIM
#         semantic: Disease
#       predicate: related_to
#       source: "infores:ctd"
#       response_mapping:
#         "$ref": "#/components/x-bte-response-mapping/ctd-omim-disease"
############################################################################
    ## - there's also disease_ontology info (ancestors, children, descendants, parents)
    ## - there's also mondo info (ancestors, descendants)
    ## - mondo info we're not including:
    ##     - part_of_progression_of_disease (only 2 disease-disease relationships)
    ##     - has_modifier (something is off here, shouldn't be mondo prefix...)
    ##     - excluded_subClassOf (something is off here, I'm not sure what that means)
    ##     - disjoint from (this is a negation / NOT relationship)
    has_subclass:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.children
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"  ## HAS PREFIX (MONDO)
          ## example: put MONDO:0002494 here (substance-related disorder)
          ##   should get MONDO:0021698 in response (alcohol-related disorders)
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: superclass_of  ## this is the inverse of subclass_of right now
      ## relation: "has children"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/has_subclass"
    subclass_of:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.parents
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0002494 here (substance-related disorder)
          ##   should get MONDO:0002025 in response (psychiatric disorder)
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: subclass_of
      ## relation: "has parents"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/subclass_of"
    predisposes_towards:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.predisposes_towards
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0010940 here (inherited susceptibility to asthma)
          ##   should get MONDO:0004979 in response (asthma)
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: contributes_to  ## maps to "MONDO:predisposes_towards"
      ## could use more specific biolink predicate like predisposes??
      ## relation: "MONDO:predisposes_towards"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/predisposes_towards"
    predisposes_towards-rev:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.mondo
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0004979 (asthma)
          ##   should get MONDO:0010940 in response (inherited susceptibility to asthma)
          scopes: mondo.predisposes_towards.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: contribution_from
      ## inverse of contributes_to, which is mapped to "MONDO:predisposes_towards"
      ## no relation then...
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mondo"
    disease_shares_features_of:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.disease_shares_features_of
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0008711 here (Goodman syndrome)
          ##   should get MONDO:0019012 in response (Carpenter syndrome)
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: similar_to  ## could biolink have a more specific predicate?
      ##   note that relation maps to biolink:related_to right now...
      ## relation: "MONDO:disease_shares_features_of"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease_shares_features_of"
    disease_shares_features_of-rev:
    ## checked and inverse relationship doesn't exist already in the data
    ##   for example, the record for Carpenter syndrome doesn't have disease_shares_features_of
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.mondo
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0019012 (Carpenter syndrome)
          ##   should get MONDO:0008711 in response (Goodman syndrome)
          scopes: mondo.disease_shares_features_of.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: similar_to  ## could biolink have a more specific predicate?
      ## no relation...
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mondo"
    disease_has_major_feature:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.disease_has_major_feature
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0015140 here (early-onset autosomal dominant Alzheimer disease)
          ##   should get MONDO:0001627 in response (dementia (disease))
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: has_part  ## maps to "MONDO:disease_has_major_feature"
      ## relation: "MONDO:disease_has_major_feature"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease_has_major_feature"
    disease_has_major_feature-rev:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.mondo
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0001627 (dementia (disease))
          ##   should get MONDO:0015140 in response (early-onset autosomal dominant Alzheimer disease)
          scopes: mondo.disease_has_major_feature.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: part_of  ## could biolink have a more specific predicate?
      ## no relation...
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mondo"
    disease_has_feature:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.disease_has_feature
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0005796 here (HIV enteropathy)
          ##   should get MONDO:0005020 in response (intestinal disease)
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: has_part  ## no biolink mapping...
      ## relation: "MONDO:disease_has_feature"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease_has_feature"
    disease_has_feature-rev:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.mondo
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0005020 (intestinal disease)
          ##   should get MONDO:0005796 in response (HIV enteropathy)
          scopes: mondo.disease_has_feature.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: part_of
      ## no relation...
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mondo"
    disease_causes_feature:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.disease_causes_feature
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0000490 here (glomerulosclerosis)
          ##   should get MONDO:0001106 in response (kidney failure)
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: causes  ## maps to "MONDO:disease_causes_feature"
      ## relation: "MONDO:disease_causes_feature"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease_causes_feature"
    disease_causes_feature-rev:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.mondo
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0001106 (kidney failure)
          ##   should get MONDO:0000490 in response (glomerulosclerosis)
          scopes: mondo.disease_causes_feature.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: caused_by
      ## no relation...
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mondo"
    disease_arises_from_feature:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.disease_arises_from_feature
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0009346 here (histidinuria due to a renal tubular defect)
          ##   should get MONDO:0021568 in response (renal tubule disease)
          scopes: mondo.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: caused_by
      ## relation: "MONDO:disease_arises_from_feature"?
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease_arises_from_feature"
    disease_arises_from_feature-rev:
    - path: "/query"
      method: post
      supportBatch: true
      inputSeparator: ","
      parameters:
        fields: mondo.mondo
        size: '1000'  ## note the size limit
      requestBody:
        body:
          q: "{inputs[0]}"   ## HAS PREFIX (MONDO)
          ## example: put MONDO:0021568 (renal tubule disease)
          ##   should get MONDO:0009346 in response (histidinuria due to a renal tubular defect)
          scopes: mondo.disease_arises_from_feature.mondo
        header: application/x-www-form-urlencoded
      inputs:
      - id: MONDO
        semantic: Disease
      outputs:
      - id: MONDO
        semantic: Disease
      predicate: causes
      ## no relation...
      source: "infores:mondo"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mondo"
