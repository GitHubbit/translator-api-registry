openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the UBERON query web services.
  termsOfService: https://biothings.io/about
  title: UBERON Ontology API
  version: '2019.11'
  x-translator:
    infores: "infores:biothings-uberon-ontology"
    component: KP
    team:
      - Service Provider
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/uberon
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/uberon
  x-maturity: production
tags:
- name: ontology
- name: anatomy
- name: query
- name: translator
- name: biothings
paths:
  "/anatomy/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "UBERON:0005368"
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Anatomy'
      #   '404':
      #     description: A response indicating an unknown anatomy ID
      # summary: Retrieve anatomy objects based on ID
      tags:
      - anatomy
  "/anatomy":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "UBERON:0005368"
              - "UBERON:0035213"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple UBERON anatomy IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      tags:
      - anatomy
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: Query string.
        in: query
        required: true
        example: parents:"UBERON:2001995"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "UBERON:0005368"
              - "UBERON:0035213"
              scopes:
              - "_id"
            schema:
              type: object
              properties:
                q:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/adjacent_to'
      - $ref: '#/components/x-bte-kgs-operations/adjacent_to-rev'
      - $ref: '#/components/x-bte-kgs-operations/attaches_to'
      - $ref: '#/components/x-bte-kgs-operations/attaches_to-rev'
      - $ref: '#/components/x-bte-kgs-operations/has_subclass'
      - $ref: '#/components/x-bte-kgs-operations/subclass_of'
      - $ref: '#/components/x-bte-kgs-operations/develops_from'
      - $ref: '#/components/x-bte-kgs-operations/develops_from-rev'
      - $ref: '#/components/x-bte-kgs-operations/extends_fibers_into'
      - $ref: '#/components/x-bte-kgs-operations/extends_fibers_into-rev'
      - $ref: '#/components/x-bte-kgs-operations/has_part'
      - $ref: '#/components/x-bte-kgs-operations/has_part-rev'
      - $ref: '#/components/x-bte-kgs-operations/located_in'
      - $ref: '#/components/x-bte-kgs-operations/located_in-rev'
      - $ref: '#/components/x-bte-kgs-operations/part_of'
      - $ref: '#/components/x-bte-kgs-operations/part_of-rev'
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  # schemas:
  #   Anatomy:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/Geneset'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/Geneset'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## UBERON can be multiple biolink categories/node-types. We use AnatomicalEntity for simplicity
  ## has many possible operations, not fully annotated yet. looked at those with > 100 matching records
  ## not annotating because there's no mapping in biolink-model, doesn't look useful
  ## - disjoint_from: 440 records
  ## - branching_part_of: 195 records
  ## - composed_primarily_of: 152 records (biolink-model term doesn't have inverse)
  ## - connects: 311 records
  ## - contributes_to_morphology_of: 610 records
  ## - has_muscle_insertion: 198 records
  ## - has_muscle_origin: 192 records
  ## - has_potential_to_develop_into: 196 records
  ## - in_lateral_side_of: 128 records
  ## - innervated_by: 134 records (mapped to related_to)
  ## - present_in_taxon: 189 records
  ## - supplies: 113 records
    adjacent_to:
    ## 241 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: adjacent_to.uberon  ## has prefix
      predicate: coexists_with  ## adjacent_to and terms like it are mapped to this in biolink-model...
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/adjacent_to'
      # testExamples:
      #   - qInput: "UBERON:0000319"        ## cytotrophoblast
      #     oneOutput: "UBERON:0000371"     ## syncytiotrophoblast
    adjacent_to-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: adjacent_to.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: coexists_with
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0004367"        ## Descemet's membrane
      #     oneOutput: "UBERON:0001777"     ## substantia propria of cornea
    attaches_to:
    ## 125 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: attaches_to.uberon  ## has prefix
      predicate: coexists_with  ## attaches_to and terms like it are mapped to this in biolink-model...
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/attaches_to'
      # testExamples:
      #   - qInput: "UBERON:0011312"        ## hyoepiglottic muscle
      #     oneOutput: "UBERON:0000388"     ## epiglottis
    attaches_to-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: attaches_to.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: coexists_with
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0001075"        ## bony vertebral centrum
      #     oneOutput: "UBERON:0011136"     ## vertebral column ligament / ligament of vertebral column
    has_subclass:
    ## 6741 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: children
      predicate: superclass_of  ## this is the inverse of subclass_of right now
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_subclass'
      # testExamples:
      #   - qInput: "UBERON:0034709"        ## hindbrain marginal layer
      #     oneOutput: "UBERON:0034708"     ## cerebellum marginal layer
    subclass_of:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: parents
      predicate: subclass_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/subclass_of'
      # testExamples:
      #   - qInput: "UBERON:0034704"        ## inflow tract of left ventricle
      #     oneOutput: "UBERON:0034698"     ## inflow tract of ventricle
    develops_from:
    ## 1354 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: develops_from.uberon
      predicate: develops_from
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/develops_from'
      # testExamples:
      #   - qInput: "UBERON:2000088"        ## yolk syncytial layer
      #     oneOutput: "UBERON:2000084"     ## yolk
    develops_from-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: develops_from.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: develops_into
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0006604"        ## lamina orbitonasalis
      #     oneOutput: "UBERON:2000226"     ## lateral ethmoid bone
    extends_fibers_into:
    ## 109 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: extends_fibers_into.uberon
      predicate: coexists_with     # extends_fibers_into and terms like it are mapped to this in biolink-model...
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/extends_fibers_into'
      # testExamples:
      #   - qInput: "UBERON:0000959"        ## optic chiasma
      #     oneOutput: "UBERON:0000941"     ## cranial nerve II
    extends_fibers_into-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: extends_fibers_into.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: coexists_with
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0002925"        ## trigeminal nucleus
      #     oneOutput: "UBERON:0001645"     ## trigeminal nerve
    has_part:
    ## 263 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: has_part.uberon
      predicate: has_part
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_part'
      # testExamples:
      #   - qInput: "UBERON:0002364"        ## tympanic membrane
      #     oneOutput: "UBERON:0005042"     ## inner epithelial layer of tympanic membrane
    has_part-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: has_part.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: part_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0001751"        ## dentine
      #     oneOutput: "UBERON:0001091"     ## calcareous tooth
    located_in:
    ## 151 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: located_in.uberon
      predicate: located_in
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/located_in'
      # testExamples:
      #   - qInput: "UBERON:4000030"        ## oropharyngeal papilla
      #     oneOutput: "UBERON:0001729"     ## oropharynx
    located_in-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: located_in.uberon
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id
      predicate: location_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0002224"        ## thoracic cavity
      #     oneOutput: "UBERON:0000170"     ## pair of lungs
    part_of:
    ## 8248 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: part_of.uberon
      predicate: part_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/part_of'
      # testExamples:
      #   - qInput: "UBERON:0034754"        ## occipitofrontal fasciculus
      #     oneOutput: "UBERON:0011299"     ## white matter of telencephalon
    part_of-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: part_of.uberon
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id
      predicate: has_part
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0002084"        ## heart left ventricle
      #     oneOutput: "UBERON:0036285"     ## wall of left ventricle
  x-bte-response-mapping:
    adjacent_to:
      UBERON: adjacent_to.uberon
    id:
      UBERON: _id
    attaches_to:
      UBERON: attaches_to.uberon
    has_subclass:
      UBERON: children
    subclass_of:
      UBERON: parents
    develops_from:
      UBERON: develops_from.uberon
    extends_fibers_into:
      UBERON: located_in.uberon
    has_part:
      UBERON: has_part.uberon
    located_in:
      UBERON: located_in.uberon
    part_of:
      UBERON: part_of.uberon
