openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the UBERON query web services.
  termsOfService: https://biothings.io/about
  title: UBERON Ontology API
  version: '2019.11'
  x-translator:
    infores: "infores:biothings-uberon-ontology"
    component: KP
    team:
      - Service Provider
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/uberon
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/uberon
  x-maturity: production
tags:
- name: anatomy
- name: query
- name: translator
- name: biothings
paths:
  /anatomy:
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple UBERON anatomy IDs separated by comma. Note
                    that currently we only take the input ids up to 1000 maximum,
                    the rest will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Phenotype'
                type: array
          description: A list of matching anatomy objects
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: For a list of anatomy IDs, return the matching anatomy object
      tags:
      - anatomy
  /anatomy/{anatomyid}:
    get:
      parameters:
      - description: Retrieve anatomy objects based on UBERON anatomy ID  Supports
          JSONP and CORS as well.
        example: UBERON:2002108
        in: path
        name: anatomyid
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Phenotype'
          description: A matching anatomy object
        '404':
          description: A response indicating an unknown anatomy ID
      summary: Retrieve anatomy objects based on ID
      tags:
      - anatomy
  /metadata:
    get:
      parameters:
      - $ref: '#/components/parameters/callback'
        in: query
        name: callback
      responses:
        '200':
          description: UBERON metadata object
      summary: Get metadata about the data available from UBERON
      tags:
      - metadata
  /metadata/fields:
    get:
      parameters:
      - $ref: '#/components/parameters/search'
        name: search
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/prefix'
        name: prefix
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          description: UBERON metadata fields object
      summary: Get metadata about the data fields available
        object
      tags:
      - metadata
  /query:
    get:
      parameters:
      - description: Query string.
        example: parents:"UBERON:2001995"
        in: query
        name: q
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/facet_size'
        name: facet_size
      - $ref: '#/components/parameters/sort'
        name: sort
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/facets'
        name: facets
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/from'
        name: from
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make queries and return matching anatomy hits. Supports JSONP and CORS
        as well.
      tags:
      - query
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPOSTResult'
          description: Query response objects with the "hits" propert
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make batch anatomy queries and return matching anatomy hits
      tags:
      - query
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/adjacent_to'
      - $ref: '#/components/x-bte-kgs-operations/adjacent_to-rev'
      - $ref: '#/components/x-bte-kgs-operations/attaches_to'
      - $ref: '#/components/x-bte-kgs-operations/attaches_to-rev'
      - $ref: '#/components/x-bte-kgs-operations/has_subclass'
      - $ref: '#/components/x-bte-kgs-operations/subclass_of'
      - $ref: '#/components/x-bte-kgs-operations/develops_from'
      - $ref: '#/components/x-bte-kgs-operations/develops_from-rev'
      - $ref: '#/components/x-bte-kgs-operations/extends_fibers_into'
      - $ref: '#/components/x-bte-kgs-operations/extends_fibers_into-rev'
      - $ref: '#/components/x-bte-kgs-operations/has_part'
      - $ref: '#/components/x-bte-kgs-operations/has_part-rev'
      - $ref: '#/components/x-bte-kgs-operations/located_in'
      - $ref: '#/components/x-bte-kgs-operations/located_in-rev'
      - $ref: '#/components/x-bte-kgs-operations/part_of'
      - $ref: '#/components/x-bte-kgs-operations/part_of-rev'
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned chem object. If "true" or "1",
        all fields will be collapsed into a single level deep object (all nested objects
        will be a single level deep, using dotfield notation to signify the nested
        structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching chem hit(s). The supported field
        names can be found from any chem object or from the /metadata/fields endpoint.
        If "fields=all", all available fields will be returned. Type: string (list).
        Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching chem hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching chem hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Phenotype:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - $ref: '#/components/schemas/Phenotype'
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            $ref: '#/components/schemas/Phenotype'
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-kgs-operations:
  ## UBERON can be multiple biolink categories/node-types. We use AnatomicalEntity for simplicity
  ## has many possible operations, not fully annotated yet. looked at those with > 100 matching records
  ## not annotating because there's no mapping in biolink-model, doesn't look useful
  ## - disjoint_from: 440 records
  ## - branching_part_of: 195 records
  ## - composed_primarily_of: 152 records (biolink-model term doesn't have inverse)
  ## - connects: 311 records
  ## - contributes_to_morphology_of: 610 records
  ## - has_muscle_insertion: 198 records
  ## - has_muscle_origin: 192 records
  ## - has_potential_to_develop_into: 196 records
  ## - in_lateral_side_of: 128 records
  ## - innervated_by: 134 records (mapped to related_to)
  ## - present_in_taxon: 189 records
  ## - supplies: 113 records
    adjacent_to:
    ## 241 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: adjacent_to.uberon  ## has prefix
      predicate: coexists_with  ## adjacent_to and terms like it are mapped to this in biolink-model...
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/adjacent_to'
      # testExamples:
      #   - qInput: "UBERON:0000319"        ## cytotrophoblast
      #     oneOutput: "UBERON:0000371"     ## syncytiotrophoblast
    adjacent_to-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: adjacent_to.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: coexists_with
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0004367"        ## Descemet's membrane
      #     oneOutput: "UBERON:0001777"     ## substantia propria of cornea
    attaches_to:
    ## 125 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: attaches_to.uberon  ## has prefix
      predicate: coexists_with  ## attaches_to and terms like it are mapped to this in biolink-model...
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/attaches_to'
      # testExamples:
      #   - qInput: "UBERON:0011312"        ## hyoepiglottic muscle
      #     oneOutput: "UBERON:0000388"     ## epiglottis
    attaches_to-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: attaches_to.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: coexists_with
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0001075"        ## bony vertebral centrum
      #     oneOutput: "UBERON:0011136"     ## vertebral column ligament / ligament of vertebral column
    has_subclass:
    ## 6741 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: children
      predicate: superclass_of  ## this is the inverse of subclass_of right now
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_subclass'
      # testExamples:
      #   - qInput: "UBERON:0034709"        ## hindbrain marginal layer
      #     oneOutput: "UBERON:0034708"     ## cerebellum marginal layer
    subclass_of:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: parents
      predicate: subclass_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/subclass_of'
      # testExamples:
      #   - qInput: "UBERON:0034704"        ## inflow tract of left ventricle
      #     oneOutput: "UBERON:0034698"     ## inflow tract of ventricle
    develops_from:
    ## 1354 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: develops_from.uberon
      predicate: develops_from
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/develops_from'
      # testExamples:
      #   - qInput: "UBERON:2000088"        ## yolk syncytial layer
      #     oneOutput: "UBERON:2000084"     ## yolk
    develops_from-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: develops_from.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: develops_into
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0006604"        ## lamina orbitonasalis
      #     oneOutput: "UBERON:2000226"     ## lateral ethmoid bone
    extends_fibers_into:
    ## 109 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: extends_fibers_into.uberon
      predicate: coexists_with     # extends_fibers_into and terms like it are mapped to this in biolink-model...
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/extends_fibers_into'
      # testExamples:
      #   - qInput: "UBERON:0000959"        ## optic chiasma
      #     oneOutput: "UBERON:0000941"     ## cranial nerve II
    extends_fibers_into-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: extends_fibers_into.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: coexists_with
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0002925"        ## trigeminal nucleus
      #     oneOutput: "UBERON:0001645"     ## trigeminal nerve
    has_part:
    ## 263 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: has_part.uberon
      predicate: has_part
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/has_part'
      # testExamples:
      #   - qInput: "UBERON:0002364"        ## tympanic membrane
      #     oneOutput: "UBERON:0005042"     ## inner epithelial layer of tympanic membrane
    has_part-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: has_part.uberon  ## has prefix
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id  ## has prefix
      predicate: part_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0001751"        ## dentine
      #     oneOutput: "UBERON:0001091"     ## calcareous tooth
    located_in:
    ## 151 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: located_in.uberon
      predicate: located_in
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/located_in'
      # testExamples:
      #   - qInput: "UBERON:4000030"        ## oropharyngeal papilla
      #     oneOutput: "UBERON:0001729"     ## oropharynx
    located_in-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: located_in.uberon
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id
      predicate: location_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0002224"        ## thoracic cavity
      #     oneOutput: "UBERON:0000170"     ## pair of lungs
    part_of:
    ## 8248 records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: part_of.uberon
      predicate: part_of
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/part_of'
      # testExamples:
      #   - qInput: "UBERON:0034754"        ## occipitofrontal fasciculus
      #     oneOutput: "UBERON:0011299"     ## white matter of telencephalon
    part_of-rev:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: UBERON
        semantic: AnatomicalEntity
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: part_of.uberon
      outputs:
      - id: UBERON
        semantic: AnatomicalEntity
      parameters:
        fields: _id
      predicate: has_part
      source: "infores:uberon"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/id'
      # testExamples:
      #   - qInput: "UBERON:0002084"        ## heart left ventricle
      #     oneOutput: "UBERON:0036285"     ## wall of left ventricle
  x-bte-response-mapping:
    adjacent_to:
      UBERON: adjacent_to.uberon
    id:
      UBERON: _id
    attaches_to:
      UBERON: attaches_to.uberon
    has_subclass:
      UBERON: children
    subclass_of:
      UBERON: parents
    develops_from:
      UBERON: develops_from.uberon
    extends_fibers_into:
      UBERON: located_in.uberon
    has_part:
      UBERON: has_part.uberon
    located_in:
      UBERON: located_in.uberon
    part_of:
      UBERON: part_of.uberon
