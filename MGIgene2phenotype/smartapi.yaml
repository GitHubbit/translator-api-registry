---
openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the MGIgene2phenotype query web services.
  termsOfService: https://biothings.io/about
  title: MGIgene2phenotype API
  version: '6.14'
  x-translator:
    infores: "infores:biothings-mgi-g2p"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.13"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/mgigene2phenotype
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/mgigene2phenotype
  x-maturity: production
tags:
- name: gene
- name: phenotype
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/gene/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "MGI:101816"
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Gene'
      #   '404':
      #     description: A response indicating an unknown gene ID
      # summary: Retrieve gene objects based on ID
      tags:
      - gene
  "/gene":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "MGI:101816"
              - "MGI:101864"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple MGI Gene IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      tags:
      - gene
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: Query string.
        in: query
        required: true
        example: _id:"MGI:101816"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "MGI:101816"
              - "MGI:101864"
              scopes:
              - "_id"
            schema:
              type: object
              properties:
                q:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/gene_related_to_disease"
      - "$ref": "#/components/x-bte-kgs-operations/disease_related_to_gene"
      - "$ref": "#/components/x-bte-kgs-operations/gene_related_to_phenotype"
      - "$ref": "#/components/x-bte-kgs-operations/phenotype_related_to_gene"
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  # schemas:
  #   Association:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/Association'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/Association'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## most of the API has mouse gene ID crossref (from MGI -> NCBIGene). incorrectly labeled "has homolog"
    gene_related_to_disease:
    ## there are 2949 records with mgi.associated_with_disease field
    ##   only 1838 of these records also have mgi.has_homolog field (NCBIGene ID for mouse gene)
    ##   all have DOID field. Don't use OMIM field since its value is an empty string in some records
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: MGI
        semantic: Gene
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id  ## has prefix
      outputs:
      - id: DOID
        semantic: Disease
      parameters:
        fields: mgi.associated_with_disease.doid  ## has prefix
      predicate: related_to
      source: "infores:mgi"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/gene_related_to_disease"
      # testExamples:
      #   - qInput: "MGI:104511"        ## Tnfsf4
      #     oneOutput: "DOID:14557"     ## primary pulmonary hypertension
    disease_related_to_gene:
    ## "reverse-type" operation
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: DOID
        semantic: Disease
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: mgi.associated_with_disease.doid  ## has prefix
      outputs:
      - id: MGI
        semantic: Gene
      parameters:
        fields: _id  ## has prefix
        size: 1000
      predicate: related_to
      source: "infores:mgi"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mgi"
      # testExamples:
      #   - qInput: "DOID:0110731"      ## neuronal ceroid lipofuscinosis 3
      #     oneOutput: "MGI:103555"     ## Clcn3
    gene_related_to_phenotype:
    ## there are 1447 records with mgi.associated_with_phenotype field
    ##   1359 of these records also have mgi.has_homolog field (NCBIGene ID for mouse gene)
    ##   all have MP field (mouse phenotype)
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: MGI
        semantic: Gene
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: _id  ## has prefix
      outputs:
      - id: MP
        semantic: PhenotypicFeature
      parameters:
        fields: mgi.associated_with_phenotype
      predicate: related_to
      source: "infores:mgi"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/gene_related_to_phenotype"
      # testExamples:
      #   - qInput: "MGI:102539"        ## Tbx6
      #     oneOutput: "MP:0002151"     ## abnormal neural tube morphology
    phenotype_related_to_gene:
    ## "reverse-type" operation
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: MP
        semantic: PhenotypicFeature
      requestBody:
        body:
          q: "{{ queryInputs }}"
          scopes: mgi.associated_with_phenotype.mp  ## has prefix
      outputs:
      - id: MGI
        semantic: Gene
      parameters:
        fields: _id  ## has prefix
        size: 1000
      predicate: related_to
      source: "infores:mgi"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/mgi"
      # testExamples: 
      #   - qInput: "MP:0000623"         ## decreased salivation
      #     oneOutput: "MGI:88398"       ## Chrm3
  x-bte-response-mapping:
    gene_related_to_disease:
      DOID: mgi.associated_with_disease.doid  ## has prefix
    gene_related_to_phenotype:
      MP: mgi.associated_with_phenotype.mp  ## has prefix
      pubmed: mgi.associated_with_phenotype.pubmed  ## no prefix
      mgi_allele_id: mgi.associated_with_phenotype.allele_id  ## curie
      mgi_allele_symbol: mgi.associated_with_phenotype.allele_symbol  ## free text?
      mgi_allelic_composition: mgi.associated_with_phenotype.allelic_composition  ## free text?
      mgi_genetic_background: mgi.associated_with_phenotype.genetic_background  ## free text?
    mgi:
      MGI: _id  ## has prefix
