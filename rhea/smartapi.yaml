openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the BioThings Rhea query web services.
  termsOfService: https://biothings.io/about
  title: BioThings Rhea API
  version: '121'
  x-translator:
    infores: "infores:biothings-rhea"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.13"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/rhea
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/rhea
  x-maturity: production
tags:
- name: chemical
- name: reaction
- name: query
- name: translator
- name: biothings
paths:
  ## endpoint might be renamed from chem to reaction
  "/chem/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "RHEA:14669"
        ## has prefix, UMLS ID for the supplement
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/umls'
      #   '404':
      #     description: A response indicating an unknown umls ID
      # summary: Retrieve umls objects based on ID
      tags:
      - reaction
  "/chem":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
            ## has prefix, Rhea ID for the reaction
              ids:
              - "RHEA:14669"
              - "RHEA:64904"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple Rhea IDs for reactions separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      tags:
      - reaction
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: Query string.
        in: query
        required: true
        example: side_l.chebi_id:"CHEBI:58738"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "CHEBI:58738"
              - "CHEBI:37565"
              scopes:
              - "side_l.chebi_id"
            schema:
              type: object
              properties:
                q:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      summary: Make batch queries and return matching hits
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-1'
      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-2'
      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-3'
      - $ref: '#/components/x-bte-kgs-operations/reaction-to-chem-4'
      - $ref: '#/components/x-bte-kgs-operations/chem-to-reaction'
      tags:
      - query
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  # schemas:
  #   umls:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/umls'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/umls'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## source: https://www.rhea-db.org/
  ## Rhea Reaction IDs
  ## - main IDs in _id field, children IDs in children_rheas field (both have prefix (RHEA))
  ## CHEBI chemical IDs
  ## - side_l.chebi_id
  ## - side_r.chebi_id
  ## - side_l.reactive_parts.chebi_id
  ## - side_r.reactive_parts.chebi_id
  ## Relationships: Maybe we could do chemical (occurs in same reaction as) other chemical?
  ## - Reaction -> chemical (has_participant)   
  ## - Chemical -> Reaction (participates_in)
    reaction-to-chem-1:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: RHEA
        semantic: MolecularActivity
      requestBody:
        body:
          ## API data has prefix (RHEA)
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: "_id,children_rheas"
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        ## has prefix on output id (CHEBI)
        ## citations has prefix (PMID)
        ## skipping side_l specific properties because they'll then get pulled out of their specific chem objects
        fields: >-
          side_l.chebi_id,
          citations,
          equation, 
          is_transport,
          status
        size: 1000  ## size limit; just in case
      predicate: has_participant
      source: "infores:rhea"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/side_l-object'
      # testExamples:
      #   - qInput: "RHEA:21429"       ## child-id for (R)-3-sulfolactate = H(+) + pyruvate + sulfite
      #     oneOutput: "CHEBI:58738"   ## (R)-3-sulfolactate
    reaction-to-chem-2:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: RHEA
        semantic: MolecularActivity
      requestBody:
        body:
          ## API data has prefix (RHEA)
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: "_id,children_rheas"
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        ## has prefix on output id (CHEBI)
        ## citations has prefix (PMID)
        ## skipping side_r specific properties because they'll then get pulled out of their specific chem objects
        fields: >-
          side_r.chebi_id,
          citations,
          equation, 
          is_transport,
          status
        size: 1000  ## size limit; just in case
      predicate: has_participant
      source: "infores:rhea"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/side_r-object'
      # testExamples:
      #   - qInput: "RHEA:15533"       ## main-id for (R)-3-sulfolactate + NAD(+) = 3-sulfopyruvate + H(+) + NADH
      #     oneOutput: "CHEBI:57940"   ## 3-sulfopyruvate
    reaction-to-chem-3:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: RHEA
        semantic: MolecularActivity
      requestBody:
        body:
          ## API data has prefix (RHEA)
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: "_id,children_rheas"
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        ## has prefix on output id (CHEBI)
        ## citations has prefix (PMID)
        ## skipping side* specific properties because they'll then get pulled out of their specific chem objects
        fields: >-
          side_l.reactive_parts.chebi_id,
          citations,
          equation, 
          is_transport,
          status
        size: 1000  ## size limit; just in case
      predicate: has_participant
      source: "infores:rhea"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/side_l_reactive-object'
      # testExamples:
      #   - qInput: "RHEA:10024"       ## main-id for L-lysyl-[histone] + S-adenosyl-L-methionine = H(+) + N(6)-methyl-L-lysyl-[histone] + S-adenosyl-L-homocysteine
      #     oneOutput: "CHEBI:29969"   ## L-lysine residue
    reaction-to-chem-4:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: RHEA
        semantic: MolecularActivity
      requestBody:
        body:
          ## API data has prefix (RHEA)
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: "_id,children_rheas"
      outputs:
      - id: CHEBI
        semantic: SmallMolecule
      parameters:
        ## has prefix on output id (CHEBI)
        ## citations has prefix (PMID)
        ## skipping side* specific properties because they'll then get pulled out of their specific chem objects
        fields: >-
          side_r.reactive_parts.chebi_id,
          citations,
          equation, 
          is_transport,
          status
        size: 1000  ## size limit; just in case
      predicate: has_participant
      source: "infores:rhea"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/side_r_reactive-object'
      # testExamples:
      #   - qInput: "RHEA:10032"       ## main-id for [protein]-C-terminal-L-glutamine + H2O = [protein]-C-terminal-L-glutamate + NH4(+)
      #     oneOutput: "CHEBI:88115"   ## C-terminal L-glutaminyl residue
    ## going to try doing chemicals -> main RHEA ID first. 
    ##   If we need the children rheas, we'll just write another copy of the operation below
    chem-to-reaction:
    - supportBatch: true
      useTemplating: true ## flag to say templating is being used below
      inputs:
      - id: CHEBI
        semantic: SmallMolecule
      requestBody:
        body:
          ## API data has prefix (CHEBI)
          ## joinSafe is only needed if the delimiter isn't a comma
          q: "{{ queryInputs }}"
          scopes: >-
            side_l.chebi_id,
            side_r.chebi_id,
            side_l.reactive_parts.chebi_id,
            side_r.reactive_parts.chebi_id
      outputs:
      - id: RHEA
        semantic: MolecularActivity
      parameters:
        ## has prefix on output id (RHEA)
        ## citations has prefix (PMID)
        ## skipping side* specific properties because they'll then get pulled out of their specific chem objects
        fields: >-
          _id,
          citations,
          equation, 
          is_transport,
          status
        size: 1000  ## size limit; just in case
      predicate: participates_in
      source: "infores:rhea"
      response_mapping:
        $ref: '#/components/x-bte-response-mapping/reaction-object'
      # testExamples:
      #   - qInput: "CHEBI:88115"   ## C-terminal L-glutaminyl residue
      #     oneOutput: "RHEA:10032"       ## main-id for [protein]-C-terminal-L-glutamine + H2O = [protein]-C-terminal-L-glutamate + NH4(+)
  x-bte-response-mapping:
    side_l-object:
      CHEBI: side_l.chebi_id     ## has CHEBI prefix
      pubmed: citations          ## has PMID prefix
      equation: equation
      is_transport: is_transport
      reaction_status: status
    side_r-object:
      CHEBI: side_r.chebi_id     ## has CHEBI prefix
      pubmed: citations          ## has PMID prefix
      equation: equation
      is_transport: is_transport
      reaction_status: status
    side_l_reactive-object:
      CHEBI: side_l.reactive_parts.chebi_id     ## has CHEBI prefix
      pubmed: citations                         ## has PMID prefix
      equation: equation
      is_transport: is_transport
      reaction_status: status
    side_r_reactive-object:
      CHEBI: side_r.reactive_parts.chebi_id     ## has CHEBI prefix
      pubmed: citations                         ## has PMID prefix
      equation: equation
      is_transport: is_transport
      reaction_status: status
    reaction-object:
      RHEA: _id     ## has RHEA prefix
      pubmed: citations          ## has PMID prefix
      equation: equation
      is_transport: is_transport
      reaction_status: status
