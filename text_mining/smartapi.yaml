openapi: 3.0.0
info:
  contact:
    email: william.baumgartner@cuanschutz.edu
    name: Bill Baumgartner
    x-id: https://github.com/bill-baumgartner/
    x-role: responsible developer
  description: Documentation of the Text Mining Targeted Association query web services.
  termsOfService: https://biothings.io/about
  title: Text Mining Targeted Association API
  version: '1.0'
  x-translator:
    infores: "infores:text-mining-provider-targeted"
    component: KP
    team:
      - Text Mining Provider
      - Service Provider
    biolink-version: "2.2.8"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/text_mining_targeted_association
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/text_mining_targeted_association
  x-maturity: production
tags:
- name: gene
- name: chemical
- name: disease
- name: phenotype
- name: association
- name: annotation
- name: query
- name: translator
- name: biothings
- name: biothings_graph
paths:
  /association:
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple association IDs separated by comma. Note
                    that currently we only take the input ids up to 1000 maximum,
                    the rest will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Association'
                type: array
          description: A list of matching association objects
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: For a list of association IDs, return the matching disease object
      tags:
      - association
  # /association/{associationid}:
  #   get:
  #     parameters:
  #     - description: Retrieve association objects based on Association ID  Supports
  #         JSONP and CORS as well.
  #       example: 275bfadd2b4c60c3
  #       in: path
  #       name: associationid
  #       required: true
  #       schema:
  #         type: string
  #     - $ref: '#/components/parameters/dotfield'
  #       name: dotfield
  #     - $ref: '#/components/parameters/callback'
  #       name: callback
  #     - $ref: '#/components/parameters/fields'
  #       name: fields
  #     - $ref: '#/components/parameters/email'
  #       name: email
  #     - $ref: '#/components/parameters/format'
  #       name: format
  #     responses:
  #       '200':
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Association'
  #         description: A matching association object
  #       '404':
  #         description: A response indicating an unknown association ID
  #     summary: Retrieve association objects based on ID
  #     tags:
  #     - association
  /metadata:
    get:
      parameters:
      - $ref: '#/components/parameters/callback'
        in: query
        name: callback
      responses:
        '200':
          description: KP metadata object
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  /metadata/fields:
    get:
      parameters:
      - $ref: '#/components/parameters/search'
        name: search
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/prefix'
        name: prefix
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          description: metadata fields object
      summary: Get metadata about the data fields available
      tags:
      - metadata
  /query:
    get:
      parameters:
      - description: Query string.
        example: object.id:CHEMBL.COMPOUND\:CHEMBL26
        in: query
        name: q
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/facet_size'
        name: facet_size
      - $ref: '#/components/parameters/sort'
        name: sort
      - $ref: '#/components/parameters/callback'
        name: callback
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/facets'
        name: facets
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/from'
        name: from
      - $ref: '#/components/parameters/format'
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make queries and return matching association hits. Supports JSONP and
        CORS as well.
      tags:
      - query
    post:
      parameters:
      - $ref: '#/components/parameters/dotfield'
        name: dotfield
      - $ref: '#/components/parameters/email'
        name: email
      - $ref: '#/components/parameters/fields'
        name: fields
      - $ref: '#/components/parameters/size'
        name: size
      - $ref: '#/components/parameters/format'
        name: format
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPOSTResult'
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
          description: A response indicating an improperly formatted query
      summary: Make batch disease queries and return matching disease hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/chebi-treats-mondo"
      - "$ref": "#/components/x-bte-kgs-operations/chebi-treats-mondo-rev"
      - "$ref": "#/components/x-bte-kgs-operations/chebi-treats-hp"
      - "$ref": "#/components/x-bte-kgs-operations/chebi-treats-hp-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-mondo"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-mondo-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-hp"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-treats-hp-rev"
      - "$ref": "#/components/x-bte-kgs-operations/chebi-positively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/chebi-positively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/chebi-negatively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/chebi-negatively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-positively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-positively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-negatively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/drugbank-negatively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-positively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-positively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-negatively_regulates-uniprotkb"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-negatively_regulates-uniprotkb-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-mondo"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-mondo-rev"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-hp"
      - "$ref": "#/components/x-bte-kgs-operations/uniprotkb-contributes_to-hp-rev"
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned chem object. If "true" or "1",
        all fields will be collapsed into a single level deep object (all nested objects
        will be a single level deep, using dotfield notation to signify the nested
        structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching chem hit(s). The supported field
        names can be found from any chem object or from the /metadata/fields endpoint.
        If "fields=all", all available fields will be returned. Type: string (list).
        Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching chem hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching chem hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Association:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - $ref: '#/components/schemas/Association'
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            $ref: '#/components/schemas/Association'
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-kgs-operations:
  ## - examples aren't currently formatted to the standard. See https://github.com/biothings/BioThings_Explorer_TRAPI/issues/357#issue-1054150561
  ## - for reverse operations, some edge attributes may seem odd (reversed subj/obj)
  ## - don't use subject.type/object.type in q, that came from SRI ID resolver and differs a lot between IDs of same namespace
  ## - use heuristics to specify input / output type. BTE will handle any discrepancies w/ SRI ID resolver...
  ##   - CHEBI, DRUGBANK :SmallMolecule
  ##   - MONDO: Disease
  ##   - HP: PhenotypicFeaure
  ##   - UniProtKB: Gene
  ## - currently we can't express _exists_ with this kind of query: useful for setting the output
  ## - currently, BTE handles prefix (CHEBI / MONDO / HP keep their prefixes, DRUGBANK / UniProtKB does not).  
  ##   in the future, could edit parser + queries to handle prefixes
  ## - joinSafe is only needed if the delimiter isn't a comma
    chebi-treats-mondo:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:treats AND _exists_:object.MONDO
    ## I find 30389 records (out of 30395) have object.type:Disease
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: CHEBI
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["subject.CHEBI", "association.edge_label"]
            }
        parameters:
          fields: object.MONDO,association.edge_attributes
          size: 1000
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: treats
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo-object"
        ## Examples:
        ## - CHEBI:10034 (warfarin sodium) -> MONDO:0000831 (thrombotic disease)
        ## - CHEBI:31346 (calcium sulfate) -> MONDO:0005246 (osteomyelitis (disease))
    chebi-treats-mondo-rev:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:treats AND _exists_:object.MONDO
    ## Not going to specify subject.type since CHEBI IDs were mapped to NamedThing, ChemicalEntity mostly (a little SmallMolecule, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.CHEBI,association.edge_attributes
          size: 1000
        outputs:
          - id: CHEBI
            semantic: SmallMolecule
        predicate: treated_by
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/chebi-subject"
        ## Examples:
        ## - MONDO:0000831 (thrombotic disease) -> CHEBI:10034 (warfarin sodium) 
        ## - MONDO:0005246 (osteomyelitis (disease)) -> CHEBI:31346 (calcium sulfate) 
    chebi-treats-hp:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:treats AND _exists_:object.HP
    ## I find only 648 records (out of 2152) have object.type:PhenotypicFeature...most are Disease (1503)
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: CHEBI
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["subject.CHEBI", "association.edge_label"]
            }
        parameters:
          fields: object.HP,association.edge_attributes
          size: 1000
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: treats
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/hp-object"
        ## Examples:
        ## - CHEBI:3309 (calcium gluconate) -> HP:0002197 (Generalized-onset seizure)
        ## - CHEBI:5147 (formoterol) -> HP:0004326 (Cachexia)
    chebi-treats-hp-rev:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:treats AND _exists_:object.HP
    ## Not going to specify subject.type since CHEBI IDs were mapped to NamedThing, ChemicalEntity mostly (a little SmallMolecule, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.CHEBI,association.edge_attributes
          size: 1000
        outputs:
          - id: CHEBI
            semantic: SmallMolecule
        predicate: treated_by
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/chebi-subject"
        ## Examples:
        ## - HP:0002197 (Generalized-onset seizure) -> CHEBI:3309 (calcium gluconate) 
        ## - HP:0004326 (Cachexia) -> CHEBI:5147 (formoterol) 
    drugbank-treats-mondo:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.MONDO
    ## I find all records (249143) use object.type:Disease
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.MONDO,association.edge_attributes
          size: 1000
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: treats
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo-object"
        ## Examples:
        ## - DRUGBANK:DB00537 (Ciprofloxacin) -> MONDO:0024314 (parasitemia)
        ## - DRUGBANK:DB00390 (Digoxin) -> MONDO:0000468 (third-degree atrioventricular block)
    drugbank-treats-mondo-rev:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.MONDO
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        predicate: treated_by
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - MONDO:0024314 (parasitemia) -> DRUGBANK:DB00537 (Ciprofloxacin) 
        ## - MONDO:0000468 (third-degree atrioventricular block) -> DRUGBANK:DB00390 (Digoxin) 
    drugbank-treats-hp:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.HP
    ## I find only 5987 records (out of 18037) have object.type:PhenotypicFeature...most are Disease (12050)
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.HP,association.edge_attributes
          size: 1000
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: treats
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/hp-object"
        ## Examples:
        ## - DRUGBANK:DB00202 (Succinylcholine) -> HP:0002153 (Hyperkalemia)
        ## - DRUGBANK:DB00829 (Diazepam) -> HP:0020219 (Motor seizure)
    drugbank-treats-hp-rev:
    ## https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:treats AND _exists_:object.HP
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","treats"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        predicate: treated_by
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - HP:0002153 (Hyperkalemia) -> DRUGBANK:DB00202 (Succinylcholine) 
        ## - HP:0020219 (Motor seizure) -> DRUGBANK:DB00829 (Diazepam) 
    chebi-positively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: CHEBI
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["subject.CHEBI", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: X "regulates" Y's "upregulated" state
        ## biolink 2.4.8: used entity_positively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - CHEBI:60311 (thyroid hormone) -> UniProtKB:P27361 (MAPK3) 
        ## - CHEBI:3215 (bupivacaine) -> UniProtKB:Q9P2L0 (WDR35)
    chebi-positively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
    ## Not going to specify subject.type since CHEBI IDs were mapped to NamedThing, ChemicalEntity mostly (a little SmallMolecule, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.CHEBI,association.edge_attributes
          size: 1000
        outputs:
          - id: CHEBI
            semantic: SmallMolecule
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: Y's "upregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_positively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/chebi-subject"
        ## Examples:
        ## - UniProtKB:P27361 (MAPK3) -> CHEBI:60311 (thyroid hormone) 
        ## - UniProtKB:Q9P2L0 (WDR35) -> CHEBI:3215 (bupivacaine) 
    chebi-negatively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: CHEBI
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["subject.CHEBI", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: X "regulates" Y's "downregulated" state
        ## biolink 2.4.8: used entity_negatively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - CHEBI:2659 (aminophylline) -> UniProtKB:P10415 (BCL2) 
        ## - CHEBI:47519 (ketoconazole) -> UniProtKB:P08684 (CYP3A4)
    chebi-negatively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.CHEBI AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
    ## Not going to specify subject.type since CHEBI IDs were mapped to NamedThing, ChemicalEntity mostly (a little SmallMolecule, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.CHEBI,association.edge_attributes
          size: 1000
        outputs:
          - id: CHEBI
            semantic: SmallMolecule
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: Y's "downregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_negatively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/chebi-subject"
        ## Examples:
        ## - UniProtKB:P10415 (BCL2) -> CHEBI:2659 (aminophylline) 
        ## - UniProtKB:P08684 (CYP3A4) -> CHEBI:47519 (ketoconazole) 
    drugbank-positively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: X "regulates" Y's "upregulated" state
        ## biolink 2.4.8: used entity_positively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - DRUGBANK:DB00515 (Cisplatin) -> UniProtKB:O94788 (ALDH1A2) 
        ## - DRUGBANK:DB15907 (Escin) -> UniProtKB:P05177 (CYP1A2)
    drugbank-positively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: Y's "upregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_positively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - UniProtKB:O94788 (ALDH1A2) -> DRUGBANK:DB00515 (Cisplatin) 
        ## - UniProtKB:P05177 (CYP1A2) -> DRUGBANK:DB15907 (Escin) 
    drugbank-negatively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["subject.DRUGBANK", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: X "regulates" Y's "downregulated" state
        ## biolink 2.4.8: used entity_negatively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - DRUGBANK:DB00067 (Vasopressin) -> UniProtKB:P01236 (PRL) 
        ## - DRUGBANK:DB00602 (Ivermectin) -> UniProtKB:O14983 (ATP2A1)
    drugbank-negatively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.DRUGBANK AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
    ## Not going to specify subject.type since DRUGBANK IDs were mapped to SmallMolecule, NamedThing mostly (a little ChemicalEntity, MolecularMixture) 
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.DRUGBANK,association.edge_attributes
          size: 1000
        outputs:
          - id: DRUGBANK
            semantic: SmallMolecule
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: Y's "downregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_negatively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/drugbank-subject"
        ## Examples:
        ## - UniProtKB:P01236 (PRL) -> DRUGBANK:DB00067 (Vasopressin) 
        ## - UniProtKB:O14983 (ATP2A1) -> DRUGBANK:DB00602 (Ivermectin) 
    uniprotkb-positively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: X "regulates" Y's "upregulated" state
        ## biolink 2.4.8: used entity_positively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - UniProtKB:O00429 (DNM1L) -> UniProtKB:P46939 (UTRN) 
        ## - UniProtKB:P36148 (GPT2) -> UniProtKB:P30531 (SLC6A1)
    uniprotkb-positively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_positively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_positively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: Y's "upregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_positively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: upregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - UniProtKB:P46939 (UTRN) -> UniProtKB:O00429 (DNM1L) 
        ## - UniProtKB:P30531 (SLC6A1) -> UniProtKB:P36148 (GPT2) 
    uniprotkb-negatively_regulates-uniprotkb:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: X "regulates" Y's "downregulated" state
        ## biolink 2.4.8: used entity_negatively_regulates_entity
        predicate: regulates
        qualifiers:
          object_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-object"
        ## Examples:
        ## - UniProtKB:P12272 (PTHLH) -> UniProtKB:Q9BPZ7 (MAPKAP1) 
        ## - UniProtKB:P43004 (SLC1A2) -> UniProtKB:Q13148 (TARDBP) 
    uniprotkb-negatively_regulates-uniprotkb-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:entity_negatively_regulates_entity AND _exists_:object.UniProtKB
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","entity_negatively_regulates_entity"]') }} ],
              "scopes": ["object.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        ## biolink 3.0.3: this is a mixin. Is this an issue?
        ##   interpretation: Y's "downregulated" state "regulated_by" X
        ## biolink 2.4.8: used entity_negatively_regulated_by_entity
        predicate: regulated_by
        qualifiers:
          subject_direction_qualifier: downregulated
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - UniProtKB:Q9BPZ7 (MAPKAP1) -> UniProtKB:P12272 (PTHLH) 
        ## - UniProtKB:Q13148 (TARDBP) -> UniProtKB:P43004 (SLC1A2) 
    uniprotkb-contributes_to-mondo:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.MONDO
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.MONDO,association.edge_attributes
          size: 1000
        outputs:
          - id: MONDO
            semantic: Disease
        predicate: contributes_to
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/mondo-object"
        ## Examples:
        ## - UniProtKB:P01344 (IGF2) -> MONDO:0005075 (thyroid gland papillary carcinoma) 
        ## - UniProtKB:P01185 (AVP) -> MONDO:0009366 (normal pressure hydrocephalus) 
    uniprotkb-contributes_to-mondo-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.MONDO
    ## I find almost all records (368678 / 368708) use object.type:Disease
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: MONDO
            semantic: Disease
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["object.MONDO", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        predicate: contribution_from
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - MONDO:0005075 (thyroid gland papillary carcinoma) -> UniProtKB:P01344 (IGF2) 
        ## - MONDO:0009366 (normal pressure hydrocephalus) -> UniProtKB:P01185 (AVP) 
    uniprotkb-contributes_to-hp:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.HP
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["subject.UniProtKB", "association.edge_label"]
            }
        parameters:
          fields: object.HP,association.edge_attributes
          size: 1000
        outputs:
          - id: HP
            semantic: PhenotypicFeature
        predicate: contributes_to
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/hp-object"
        ## Examples:
        ## - UniProtKB:Q76L83 (ASXL2) -> HP:0001510 (Growth delay) 
        ## - UniProtKB:P17677 (GAP43) -> HP:0002197 (Generalized-onset seizure) 
    uniprotkb-contributes_to-hp-rev:
    ##  https://biothings.ncats.io/text_mining_targeted_association/query?q=_exists_:subject.UniProtKB AND association.edge_label:contributes_to AND _exists_:object.HP
    ## I find only 6824 records (out of 24414) use object.type:PhenotypicFeature...most use Disease (17491)
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: HP
            semantic: PhenotypicFeature
        requestBodyType: object
        requestBody:
          body: >-
            {
              "q": [ {{ queryInputs | wrap( '["' , '","contributes_to"]') }} ],
              "scopes": ["object.HP", "association.edge_label"]
            }
        parameters:
          fields: subject.UniProtKB,association.edge_attributes
          size: 1000
        outputs:
          - id: UniProtKB
            semantic: Gene
        predicate: contribution_from
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprotkb-subject"
        ## Examples:
        ## - HP:0001510 (Growth delay) -> UniProtKB:Q76L83 (ASXL2) 
        ## - HP:0002197 (Generalized-onset seizure) -> UniProtKB:P17677 (GAP43) 
  x-bte-response-mapping:
    mondo-object:
      MONDO: object.MONDO
      edge-attributes: association.edge_attributes
    chebi-subject:
      CHEBI: subject.CHEBI
      edge-attributes: association.edge_attributes
    hp-object:
      HP: object.HP
      edge-attributes: association.edge_attributes
    drugbank-subject:
      DRUGBANK: subject.DRUGBANK
      edge-attributes: association.edge_attributes
    uniprotkb-object:
      UniProtKB: object.UniProtKB
      edge-attributes: association.edge_attributes
    uniprotkb-subject:
      UniProtKB: subject.UniProtKB
      edge-attributes: association.edge_attributes
