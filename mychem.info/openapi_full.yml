openapi: 3.0.0
info:
  contact:
    email: help@biothings.io
    name: Chunlei Wu
    x-id: https://github.com/newgene
    x-role: responsible developer
  description: Documentation of the MyChem.info chem query web services.  Learn more
    about [MyChem.info](http://MyChem.info/)
  termsOfService: http://MyChem.info/terms
  title: MyChem.info API
  version: '1.0'
  x-translator:
    infores: "infores:mychem-info"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.2.3"
servers:
- description: Encrypted Production server
  url: https://mychem.info/v1
- description: Production server
  url: http://mychem.info/v1
tags:
- name: chemical
- name: drug
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/chem":
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                ids:
                  description: 'multiple chemical IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: string
              required:
              - ids
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  "$ref": "#/components/schemas/Chem"
                type: array
          description: A list of matching chemical objects
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: For a list of chemical IDs, return the matching chemical object
      tags:
      - chemical
  "/chem/{chemid}":
    get:
      parameters:
      - description: 'Retrieve chemical objects based on ID - currently one of: [InChiKey](https://en.wikipedia.org/wiki/International_Chemical_Identifier#InChIKey),
          [DrugBank accession number](https://www.drugbank.ca/documentation), [ChEMBLID](https://www.ebi.ac.uk/chembl/faq#faq40),
          [ChEBI identifier](http://www.ebi.ac.uk/chebi/aboutChebiForward.do), [PubChem
          CID](https://pubchem.ncbi.nlm.nih.gov/search/help_search.html#Cid), [UNII](https://www.fda.gov/ForIndustry/DataStandards/SubstanceRegistrationSystem-UniqueIngredientIdentifierUNII/).  Supports
          JSONP and CORS as well.'
        example: USNINKBPBVKHHZ-CYUUQNCZSA-L
        in: path
        name: chemid
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Chem"
          description: A matching chemical object
        '404':
          description: A response indicating an unknown chemical ID
      summary: Retrieve chemical objects based on ID
      tags:
      - chemical
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/callback"
        in: query
        name: callback
      responses:
        '200':
          description: MyChem.info metadata object
      summary: Get metadata about the data available from MyChem.info
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/search"
        name: search
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/prefix"
        name: prefix
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          description: MyChem.info metadata fields object
      summary: Get metadata about the data fields available from a MyChem.info chem
        object
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - description: 'Query string.  The detailed query syntax can be found from our
          [docs](http://MyChem.info).  Examples: "Fludara", "CHEMBI:63599", "DB01073".'
        example: Fludara
        in: query
        name: q
        required: true
        schema:
          type: string
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/facet_size"
        name: facet_size
      - "$ref": "#/components/parameters/sort"
        name: sort
      - "$ref": "#/components/parameters/callback"
        name: callback
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/facets"
        name: facets
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/from"
        name: from
      - "$ref": "#/components/parameters/format"
        name: format
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryResult"
          description: A query response with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make chemical queries and return matching chemical hits. Supports JSONP
        and CORS as well.
      tags:
      - query
    post:
      parameters:
      - "$ref": "#/components/parameters/dotfield"
        name: dotfield
      - "$ref": "#/components/parameters/email"
        name: email
      - "$ref": "#/components/parameters/fields"
        name: fields
      - "$ref": "#/components/parameters/size"
        name: size
      - "$ref": "#/components/parameters/format"
        name: format
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                q:
                  description: multiple query terms separated by comma (also "+" or
                    whitespace).  Does not support wildcard queries
                  type: string
                scopes:
                  description: 'a comma-separated list of fields as the search "scopes"
                    (fields to search through for query term). The available "fields"
                    that can be passed to the "scopes" parameter are listed in the
                    **/metadata/fields** endpoint.string Default: "scopes=_id".'
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryPOSTResult"
          description: Query response objects with the "hits" property
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResult"
          description: A response indicating an improperly formatted query
      summary: Make batch chemical queries and return matching chemical hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/target"
      - "$ref": "#/components/x-bte-kgs-operations/treats"
      - "$ref": "#/components/x-bte-kgs-operations/contraindication"
      - "$ref": "#/components/x-bte-kgs-operations/targetedBy"
      - "$ref": "#/components/x-bte-kgs-operations/treatedBy"
      - "$ref": "#/components/x-bte-kgs-operations/contraindicatedBy"
      - "$ref": "#/components/x-bte-kgs-operations/treats2"
      - "$ref": "#/components/x-bte-kgs-operations/treatedBy2"
      - "$ref": "#/components/x-bte-kgs-operations/causesAdverseEvent"
      - "$ref": "#/components/x-bte-kgs-operations/adverseEventCausedBy"
components:
  parameters:
    callback:
      description: 'you can pass a "callback" parameter to make a JSONP call. Type:
        string.'
      in: query
      name: callback
      schema:
        type: string
    dotfield:
      description: 'control the format of the returned chem object. If "true" or "1",
        all fields will be collapsed into a single level deep object (all nested objects
        will be a single level deep, using dotfield notation to signify the nested
        structure) Type: boolean. Default: false.'
      in: query
      name: dotfield
      schema:
        type: boolean
    email:
      description: If you are regular users of our services, we encourage you to provide
        us with an email, so that we can better track the usage or follow up with
        you.
      in: query
      name: email
      schema:
        type: string
    facet_size:
      description: 'the number of facet buckets to return in the response. Type: integer.
        Default: 10. Max: 1000.'
      in: query
      name: facet_size
      schema:
        type: integer
    facets:
      description: 'a comma-separated list of fields to return facets on.  In addition
        to query hits, the fields notated in "facets" will be aggregated by value
        and bucklet counts will be displayed in the "facets" field of the response
        object. Type: string (list). Default: None. Max: 1000.'
      in: query
      name: facets
      schema:
        type: string
    fields:
      description: 'a comma-separated list of fields (in dotfield notation) used to
        limit the fields returned from the matching chem hit(s). The supported field
        names can be found from any chem object or from the /metadata/fields endpoint.
        If "fields=all", all available fields will be returned. Type: string (list).
        Default: all. Max: 1000.'
      in: query
      name: fields
      schema:
        type: string
    format:
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      name: format
      schema:
        type: string
    from:
      description: 'the number of matching chem hits to skip, starting from 0.  This
        can be useful for paging in combination with the "size" parameter. Type: integer.
        Default: None.'
      in: query
      name: from
      schema:
        type: integer
    prefix:
      description: 'Pass a prefix string to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: prefix
      schema:
        type: string
    search:
      description: 'Pass a search term to filter the available fields. Type: string.
        Default: None.'
      in: query
      name: search
      schema:
        type: string
    size:
      description: 'the maximum number of matching chem hits to return per batch.
        Type: integer. Default: 10.'
      in: query
      name: size
      schema:
        type: integer
    sort:
      description: 'the comma-separated list of fields to sort on. Prefix each with
        "-" for descending order, otherwise in ascending order. Default: sort by descending
        score.'
      in: query
      name: sort
      schema:
        type: string
  schemas:
    Chem:
      properties:
        _id:
          type: string
      required:
      - _id
      type: object
    ErrorResult:
      properties:
        message:
          type: string
        success:
          type: boolean
      type: object
    QueryPOSTResult:
      items:
        allOf:
        - "$ref": "#/components/schemas/Chem"
        - properties:
            _score:
              format: float
              type: number
            query:
              type: string
          type: object
      type: array
    QueryResult:
      properties:
        hits:
          items:
            "$ref": "#/components/schemas/Chem"
          type: array
        max_score:
          format: float
          type: number
        took:
          type: integer
        total:
          type: integer
      type: object
    int64_or_array:
      oneOf:
      - items:
          format: int64
          type: integer
        type: array
      - format: int64
        type: integer
    string_or_array:
      oneOf:
      - items:
          type: string
        type: array
      - type: string
  x-bte-response-mapping:
    target-drugcentral:
      UniProtKB: drugcentral.bioactivity.uniprot.uniprot_id  ## no prefix
      name: drugcentral.bioactivity.target_name
      ## edge attributes
      ## like a relation: has values like AGONIST, ANTAGONIST, INHIBITOR, BLOCKER...
      ##   BUT NOT ALL ASSOCATIONS HAVE THIS
      drugcentral_bioactivity_action: drugcentral.bioactivity.action_type
      ## organism the gene/protein is in...
      inTaxon: drugcentral.bioactivity.organism
      ## other fields (difficult to model/understand):
      ##   - act_value: probably the -log([M]) (concentration?) of chemical
      ##     act_type: explains what act_value is (Ki, EC50, etc.)
      ##     act_source: keyword for where this info came from
      ##   - moa: 1 seems to mean this interaction is part of drug's mechanism of action (moa)
      ##     moa_source: where the moa info above is from?
    treats:
      UMLS: drugcentral.drug_use.indication.umls_cui  ## no prefix
      name: drugcentral.drug_use.indication.concept_name
    contraindication:
      UMLS: drugcentral.drug_use.contraindication.umls_cui  ## no prefix
      name: drugcentral.drug_use.contraindication.concept_name
    chembl:
      CHEMBL.COMPOUND: chembl.molecule_chembl_id  ## no prefix
    drugcentral-chembl:
      CHEMBL.COMPOUND: drugcentral.xrefs.chembl_id  ## no prefix
    chembl-treats:
      MESH: chembl.drug_indications.mesh_id
      name: chembl.drug_indications.mesh_heading
      ## edge attributes
      max_clinical_phase_for_indication: chembl.drug_indications.max_phase_for_ind
      year_first_approved: chembl.drug_indications.first_approval
      ## provenance-related field. Sources are ATC, ClinicalTrial, DailyMed, FDA
      reference_urls: chembl.drug_indications.indication_refs.url
      source: chembl.drug_indications.indication_refs.type
    adverseEvent:
      MEDDRA: drugcentral.fda_adverse_event.meddra_code
      name: drugcentral.fda_adverse_event.meddra_term
      ## - there are also edge attributes that are hard to explain/understand
      ##    - having drug + adverse event (ae) (drug_ae), having drug but no adverse event (drug_no_ae)
      ##    - no drug but had adverse event (no_drug_ae), no drug and no adverse event (no_drug_no_ar)
      ##    - not sure what the llr, llr_threshold, level means. 
      ##      Likely related to log-likelihood ratio (LLR) and its test...
  x-bte-kgs-operations:
    ## BIG NOTE: this endpoint actually gives genes from multiple organisms that we don't tell apart right now. Look at drugcentral.bioactivity.organism, I've seen values "Homo sapiens", "Rattus norvegicus", "Bos taurus", "Mus musculus"...
    ## can adjust query to return only human genes...
    target:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: drugcentral.bioactivity
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put CHEMBL384467 here (DEXAMETHASONE)
          ##   should get P35354 (PTGS2, Human) in response
          scopes: drugcentral.xrefs.chembl_id
          ## there are 2382 records with drugcentral.bioactivity fields
          ##   most of them (2362) also have the drugcentral.xrefs.chembl_id field
        header: application/x-www-form-urlencoded
      inputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      outputs:
      - id: UniProtKB
        semantic: Gene
      ## biolink issue #677. Using a new predicate like has_target may be better
      ##   could use relation SIO:000291 ("has target")
      ## also tricky since technically the gene product interacts with the chemical
      predicate: physically_interacts_with
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/target-drugcentral"
    treats:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: drugcentral.drug_use.indication
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put CHEMBL650 here (METHYLPREDNISOLONE)
          ##   should get C0001403 (Primary adrenocortical insufficiency) in response
          scopes: drugcentral.xrefs.chembl_id
          ## there are 2366 records with drugcentral.drug_use.indication fields
          ##   most of them (2320) also have the drugcentral.xrefs.chembl_id field
          ## note: there were slightly more records (2324) with the drugcentral.xrefs.unii field
        header: application/x-www-form-urlencoded
      inputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      outputs:
      - id: UMLS
        semantic: Disease
      ## FYI: output could also be SNOMED (specifically SNOMED-CT US Edition). 
      ##     Looks like the native ID for DrugCentral, see https://drugcentral.org/drugcard/1768#druguse. 
      ##     The original data source also may have some DOID mappings (see the linked example), but the API doesn't have this right now.
      ## could use more specific predicate like approved to treat? relation is "indication"
      predicate: treats
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/treats"
    contraindication:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: drugcentral.drug_use.contraindication
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put CHEMBL1229 here (OSELTAMIVIR)
          ##   should get C0268734 (Acute nephropathy) in response
          scopes: :drugcentral.xrefs.chembl_id
          ## there are 1375 records with drugcentral.drug_use.contraindication fields
          ##   most of them (1365) also have the drugcentral.xrefs.chembl_id field
        header: application/x-www-form-urlencoded
      inputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      outputs:
      - id: UMLS
        semantic: Disease
      ## FYI: output could also be SNOMED (specifically SNOMED-CT US Edition). 
      ##     Looks like the native ID for DrugCentral, see https://drugcentral.org/drugcard/1768#druguse. 
      ##     The original data source also may have some DOID mappings (see the linked example), but the API doesn't have this right now.
      predicate: contraindicated_for  ## current biolink predicate
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/contraindication"
    targetedBy:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        ## there are 2382 records with drugcentral.bioactivity fields
        ##   most of them (2362) also have the drugcentral.xrefs.chembl_id field
        fields: drugcentral.xrefs.chembl_id
        size: '1000'  ## note size limit
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put O15554 here (KCNN4)
          ##   should get CHEMBL475534 (NITRENDIPINE) in response
          scopes: drugcentral.bioactivity.uniprot.uniprot_id
        header: application/x-www-form-urlencoded
      outputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      ## to get this, need gene-protein conflation in ID resolver
      inputs:
      - id: UniProtKB
        semantic: Gene
      ## biolink issue #677. Using a new predicate like targeted_by may be better
      ##   could use relation GENO:0000634 ("is_targeted_by")
      predicate: physically_interacts_with
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/drugcentral-chembl"
    treatedBy:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        ## there are 2366 records with drugcentral.drug_use.indication fields
        ##   most of them (2320) also have the drugcentral.xrefs.chembl_id field
        ## note: there were slightly more records (2324) with the drugcentral.xrefs.unii field
        fields: drugcentral.xrefs.chembl_id
        size: '1000'  ## note size limit
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put C0038013 here (Ankylosing spondylitis)
          ##   should get CHEMBL650 (METHYLPREDNISOLONE) in response
          scopes: drugcentral.drug_use.indication.umls_cui
        header: application/x-www-form-urlencoded
      outputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      ## FYI: input could also be SNOMED (specifically SNOMED-CT US Edition). 
      ##     Looks like the native ID for DrugCentral, see https://drugcentral.org/drugcard/1768#druguse. 
      ##     The original data source also may have some DOID mappings (see the linked example), but the API doesn't have this right now.
      inputs:
      - id: UMLS
        semantic: Disease
      ## could use more specific predicate like approved for treatment by? relation is "indication"
      predicate: treated_by
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/drugcentral-chembl"
    contraindicatedBy:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        ## there are 1375 records with drugcentral.drug_use.contraindication fields
        ##   most of them (1365) also have the drugcentral.xrefs.chembl_id field
        fields: drugcentral.xrefs.chembl_id
        size: '1000'  ## note size limit
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put C0001403 here (Primary adrenocortical insufficiency)
          ##   should get CHEMBL1193 (pheniramine) in response
          scopes: drugcentral.drug_use.contraindication.umls_cui
        header: application/x-www-form-urlencoded
      outputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      ## FYI: input could also be SNOMED (specifically SNOMED-CT US Edition). 
      ##     Looks like the native ID for DrugCentral, see https://drugcentral.org/drugcard/1768#druguse. 
      ##     The original data source also may have some DOID mappings (see the linked example), but the API doesn't have this right now.
      inputs:
      - id: UMLS
        semantic: Disease
      predicate: has_contraindication
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/drugcentral-chembl"
    treats2:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: chembl.drug_indications
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put CHEMBL650 here (METHYLPREDNISOLONE)
          ##   should get D000690 (Amyotrophic Lateral Sclerosis) in response
          scopes: chembl.molecule_chembl_id
        header: application/x-www-form-urlencoded
      inputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      outputs:
      - id: MESH
        semantic: Disease
      ## could use more specific predicate like approved to treat? relation is "indication"
      predicate: treats
      source: "infores:chembl"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/chembl-treats"
    treatedBy2:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: chembl.molecule_chembl_id
        size: '1000'  ## note size limit
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put D010024 here (Osteoporosis)
          ##   should get CHEMBL3989569 (IBANDRONATE SODIUM) in response
          scopes: chembl.drug_indications.mesh_id
        header: application/x-www-form-urlencoded
      outputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      inputs:
      - id: MESH
        semantic: Disease
      ## could use more specific predicate like approved for treatment by? relation is "indication"
      predicate: treated_by
      source: "infores:chembl"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/chembl"
    causesAdverseEvent:
    ## - chose to map to Disease semantic type since I saw SRI map some MEDDRA IDs to Disease...
    ##   https://nodenormalization-sri-dev.renci.org/1.1/get_normalized_nodes?curie=MEDDRA%3A10012735&curie=MEDDRA%3A10035528
    ##   But some are definitely PhenotypicFeatures...
    - supportBatch: true
      inputSeparator: ","
      parameters:
        fields: drugcentral.fda_adverse_event
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put CHEMBL231884 here (diosmin)
          ##   should get 10021036 (Hyponatraemia) in response
          scopes: drugcentral.xrefs.chembl_id
          ## there are 2016 records with drugcentral.fda_adverse_event fields
          ##   most of them (1994) also have the drugcentral.xrefs.chembl_id field
        header: application/x-www-form-urlencoded
      inputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      outputs:
      - id: MEDDRA
        semantic: Disease
      predicate: causes_adverse_event  ## current biolink predicate
      ## through drugcentral, FDA Adverse Event Reporting System (FAERS) information
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/adverseEvent"
    adverseEventCausedBy:
    - supportBatch: true
      inputSeparator: ","
      parameters:
        ## there are 2016 records with drugcentral.fda_adverse_event fields
        ##   most of them (1994) also have the drugcentral.xrefs.chembl_id field
        fields: drugcentral.xrefs.chembl_id
        size: '1000'  ## note size limit
      requestBody:
        body:
          q: "{inputs[0]}"  ## no prefix
          ## example: put 10007554 here (Cardiac failure)
          ##   should get CHEMBL231884 (diosmin) in response
          scopes: drugcentral.fda_adverse_event.meddra_code
        header: application/x-www-form-urlencoded
      outputs:
      - id: CHEMBL.COMPOUND
        semantic: SmallMolecule
      inputs:
      - id: MEDDRA
        semantic: Disease
      predicate: adverse_event_caused_by  ## current biolink predicate
      ## through drugcentral, FDA Adverse Event Reporting System (FAERS) information
      source: "infores:drugcentral"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/drugcentral-chembl"
