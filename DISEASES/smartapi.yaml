---
openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: Documentation of the DISEASES query web services.
  termsOfService: https://biothings.io/about
  title: DISEASES API
  version: '1.0'
  x-translator:
    infores: "infores:biothings-diseases"
    component: KP
    team:
      - Service Provider
    biolink-version: "3.0.3"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/DISEASES
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/DISEASES
  x-maturity: production
tags:
- name: gene
- name: disease
- name: annotation
- name: query
- name: translator
- name: biothings
paths:
  "/disease/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "DOID:2987"
        ## has prefix, DOID IDs
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Disease'
      #   '404':
      #     description: A response indicating an unknown Disease ID
      # summary: Retrieve Disease objects based on ID
      tags:
      - disease
  "/disease":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
            ## has prefix, DOID IDs
              ids:
              - "DOID:2987"
              - "DOID:4645"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple Disease IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      tags:
      - disease
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: Query string.
        in: query
        required: true
        example: DISEASES.doid:"DOID:2987"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "DOID:2987"
              - "DOID:4645"
              scopes:
              - "DISEASES.doid"
            schema:
              type: object
              properties:
                q:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      x-bte-kgs-operations:
      - "$ref": "#/components/x-bte-kgs-operations/disease-gene"
      - "$ref": "#/components/x-bte-kgs-operations/gene-disease"
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  # schemas:
  #   Disease:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - "$ref": "#/components/schemas/Disease"
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           "$ref": "#/components/schemas/Disease"
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
  ## look here for more details: https://diseases.jensenlab.org/Entity?order=textmining,knowledge,experiments&textmining=10&knowledge=10&experiments=10&type1=9606&type2=-26&id1=ENSP00000298910
  ## odd that no publications are in our API but perhaps one can see it in the website?  
    disease-gene:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: DOID
        semantic: Disease
      requestBody:
        body:
          q: "{{ queryInputs }}"   ## HAS PREFIX
          scopes: DISEASES.doid
        header: application/x-www-form-urlencoded
      outputs:
      - id: ENSEMBL
        semantic: Gene
      parameters:
      ## no prefix on output
        fields: >-
          DISEASES.associatedWith.ensembl,
          DISEASES.associatedWith.category,
          DISEASES.associatedWith.confidence,
          DISEASES.associatedWith.zscore,
          DISEASES.associatedWith.source,
          DISEASES.associatedWith.evidence
        size: 1000  ## size limit; adding just in case
      predicate: condition_associated_with_gene
      ## can't be more specific because all data for the disease will be returned
      ##   (can't restrict based on DISEASES.associatedWith.category == "knowledge" vs "textmining")
      source: "infores:diseases"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/disease-gene"
      # testExamples:
      #   - qInput: "DOID:0060041"     ## Autism spectrum disorder
      #     oneOutput: "ENSEMBL:ENSP00000482335"    ## MAP7
      ## should be able to see results with all 3 methods/combos of edge attributes
    gene-disease:
    - supportBatch: true
      useTemplating: true
      inputs:
      - id: ENSEMBL
        semantic: Gene
      requestBody:
        body:
          q: "{{ queryInputs }}"   ## no prefix
          scopes: DISEASES.associatedWith.ensembl
        header: application/x-www-form-urlencoded
      outputs:
      - id: DOID
        semantic: Disease
      parameters:
        fields: DISEASES.doid   ## HAS PREFIX
        size: 1000              ## note size limit
      predicate: gene_associated_with_condition
      ## can't be more specific because all data for the disease will be returned
      ##   (can't restrict based on DISEASES.associatedWith.category == "knowledge" vs "textmining")
      source: "infores:diseases"
      response_mapping:
        "$ref": "#/components/x-bte-response-mapping/gene-disease"
      # testExamples:
      #   - qInput: "ENSEMBL:ENSP00000298910"    ## LRRK2
      #     oneOutput: "DOID:1926"               ## Gaucher disease
  x-bte-response-mapping:
    disease-gene:
      ENSEMBL: DISEASES.associatedWith.ensembl  ## no prefix
      ## how the knowledge was generated. Values seen so far are "textmining", "knowledge", "experiments"
      method: DISEASES.associatedWith.category
      ## all 3 methods show this value, higher is better
      DISEASES_confidence_score: DISEASES.associatedWith.confidence
      ## I'm only seen z-score for text-mined results"
      DISEASES_textmining_z-score: DISEASES.associatedWith.zscore
      ## I see source for knowledge / experiments results
      ##   for knowledge, I've seen: GHR, UniProtKB-KW, AmyCo
      ##   for experiments, I've seen: DistiLD
      DISEASES_source_database: DISEASES.associatedWith.source
      ## I see evidence for knowledge / experiments results
      ##   for knowledge, I've only seen "CURATED"
      ##   for experiments, I see things like "p-value = 3e-06"
      DISEASES_evidence: DISEASES.associatedWith.evidence
    gene-disease:
      DOID: DISEASES.doid  ## HAS PREFIX (DOID)
