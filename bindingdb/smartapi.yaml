openapi: 3.0.3
info:
  contact:
    email: help@biothings.io
    name: BioThings Team
    x-id: https://github.com/biothings
    x-role: responsible developers
  description: >-
    Documentation of the BioThings [BindingDB](https://www.bindingdb.org/rwd/bind/index.jsp) query web services.
  termsOfService: https://biothings.io/about
  title: BioThings BindingDB API
  version: '2022-06-01'
  x-translator:
    infores: "infores:biothings-bindingdb"
    component: KP
    team:
      - Service Provider
    biolink-version: "2.4.8"
servers:
- description: Encrypted Production server
  url: https://biothings.ncats.io/bindingdb
  x-maturity: production
- description: Production server
  url: http://biothings.ncats.io/bindingdb
  x-maturity: production
tags:
- name: association
- name: protein
- name: chemical
- name: query
- name: translator
- name: biothings
paths:
  "/association/{id}":
    get:
      parameters:
      - name: id
        in: path
        required: true
        example: "456856-P35414"
        schema:
          type: string
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: "Success"
      #     content:
      #       application/json:
      #         schema:
      #           $ref: '#/components/schemas/Association'
      #   '404':
      #     description: A response indicating an unknown association ID
      summary: >-
        Retrieve association based on ID
      tags:
      - association
  "/association":
    post:
      parameters:
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              ids:
              - "456856-P35414"
              - "450507-Q13822"
            schema:
              type: object
              properties:
                ids:
                  description: 'multiple Association IDs separated by comma. Note that
                    currently we only take the input ids up to 1000 maximum, the rest
                    will be omitted. Type: string (list). Max: 1000.'
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: "Success"
      summary: >-
        Retrieve multiple associations' information based on ID
      tags:
      - association
  "/metadata":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/dev"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data available from the API
      tags:
      - metadata
  "/metadata/fields":
    get:
      parameters:
      - "$ref": "#/components/parameters/format"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/search"
      - "$ref": "#/components/parameters/prefix"
      responses:
        '200':
          description: Success
      summary: Get metadata about the data fields available from a record
      tags:
      - metadata
  "/query":
    get:
      parameters:
      - name: q
        description: Query string.
        in: query
        required: true
        example: "object.pubchem_cid:134329991"
        schema:
          type: string
      - "$ref": "#/components/parameters/aggs"
      - "$ref": "#/components/parameters/facet_size"
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/userquery"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/explain"
      - "$ref": "#/components/parameters/fetch_all"
      - "$ref": "#/components/parameters/scroll_id"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make queries and return matching gene hits. Supports JSONP and CORS
      #   as well.
      tags:
      - query
    post:
      parameters:
      - name: q
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
      - name: scopes
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
            default:
            - _id
      - "$ref": "#/components/parameters/from"
      - "$ref": "#/components/parameters/sort"
      - "$ref": "#/components/parameters/raw"
      - "$ref": "#/components/parameters/rawquery"
      - "$ref": "#/components/parameters/_source"
      - "$ref": "#/components/parameters/size"
      - "$ref": "#/components/parameters/dotfield"
      - "$ref": "#/components/parameters/_sorted"
      - "$ref": "#/components/parameters/always_list"
      - "$ref": "#/components/parameters/allow_null"
      - "$ref": "#/components/parameters/format"
      requestBody:
        content:
          application/json:
            example:
              q:
              - "134329991"
              - "134330137"
              scopes:
              - "object.pubchem_cid"
            schema:
              type: object
              properties:
                q:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    type: string
                from:
                  type: integer
                sort:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/QueryPOSTResult"
      #   '400':
      #     content:
      #       application/json:
      #         schema:
      #           "$ref": "#/components/schemas/ErrorResult"
      #     description: A response indicating an improperly formatted query
      # summary: Make batch gene queries and return matching gene hits
      tags:
      - query
      ## 2 operations
      x-bte-kgs-operations:
      - $ref: '#/components/x-bte-kgs-operations/protein-ligand'
      - $ref: '#/components/x-bte-kgs-operations/ligand-protein'
components:
  parameters:
    _sorted:
      name: _sorted
      in: query
      required: false
      schema:
        type: boolean
        default: true
    _source:
      name: _source
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    aggs:
      name: aggs
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    allow_null:
      name: allow_null
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    always_list:
      name: always_list
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    dev:
      name: dev
      in: query
      required: false
      schema:
        type: boolean
    dotfield:
      name: dotfield
      in: query
      required: false
      schema:
        type: boolean
    explain:
      name: explain
      in: query
      required: false
      schema:
        type: boolean
    facet_size:
      name: facet_size
      in: query
      required: false
      schema:
        type: integer
        default: 10
    fetch_all:
      name: fetch_all
      in: query
      required: false
      schema:
        type: boolean
    format:
      name: format
      description: 'controls output format of server response, currently supports:
        "json", "jsonld", "html". Type: string. Default: json.'
      in: query
      required: false
      schema:
        type: string
        default: json
    from:
      name: from
      in: query
      required: false
      schema:
        type: integer
    prefix:
      name: prefix
      in: query
      required: false
      schema:
        type: string
    raw:
      name: raw
      in: query
      required: false
      schema:
        type: boolean
    rawquery:
      name: rawquery
      in: query
      required: false
      schema:
        type: boolean
    scroll_id:
      name: scroll_id
      in: query
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
    size:
      name: size
      description: "default: 10 objects/records in response"
      in: query
      required: false
      schema:
        type: integer
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
    userquery:
      name: userquery
      in: query
      required: false
      schema:
        type: string
  # schemas:
  #   Association:
  #     properties:
  #       _id:
  #         type: string
  #     required:
  #     - _id
  #     type: object
  #   ErrorResult:
  #     properties:
  #       message:
  #         type: string
  #       success:
  #         type: boolean
  #     type: object
  #   QueryPOSTResult:
  #     items:
  #       allOf:
  #       - $ref: '#/components/schemas/Association'
  #       - properties:
  #           _score:
  #             format: float
  #             type: number
  #           query:
  #             type: string
  #         type: object
  #     type: array
  #   QueryResult:
  #     properties:
  #       hits:
  #         items:
  #           $ref: '#/components/schemas/Association'
  #         type: array
  #       max_score:
  #         format: float
  #         type: number
  #       took:
  #         type: integer
  #       total:
  #         type: integer
  #     type: object
  #   int64_or_array:
  #     oneOf:
  #     - items:
  #         format: int64
  #         type: integer
  #       type: array
  #     - format: int64
  #       type: integer
  #   string_or_array:
  #     oneOf:
  #     - items:
  #         type: string
  #       type: array
  #     - type: string
  x-bte-kgs-operations:
    ## most (1413051 out of 1438909) documents in the API have a object.pubchem_cid field (all have the subject.uniprot.accession field). 
    ##     25,858 documents don't have object.pubchem_cid field so they currently aren't in the API
    ##     see analysis here https://github.com/biothings/pending.api/issues/70#issuecomment-1201574110
    ## other fields that are interesting, but seem overly detailed (so not included)
    ##   relation.ki_nm, relation.ic50_nm, relation.kd_nm, relation.ec50_nm, relation.kon, relation.koff, relation.ph, relation.temp_c, relation.num_protein_chains
    protein-ligand:
      - supportBatch: true
        useTemplating: true ## flag to say templating is being used below
        inputs:
          - id: UniProtKB
            semantic: Gene
        requestBody:
          body:
            ## API data has no prefix
            ## joinSafe is only needed if the delimiter isn't a comma
            q: "{{ queryInputs }}"
            scopes: subject.uniprot.accession
        outputs:
          - id: "PUBCHEM.COMPOUND"
            semantic: SmallMolecule
        parameters:
        ## only some documents have: subject.organism, relation.pmid, relation.article_doi, relation.patent_number
          fields: >-
            object.pubchem_cid,
            subject.name,subject.organism,
            relation.curation_datasource,relation.pmid,relation.bindingdb_link,relation.article_doi,relation.patent_number
          size: 1000
        predicate: physically_interacts_with
        source: "infores:bindingdb"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/pubchem-object"
        # testExamples:
        #   - qInput: "UniProtKB:P51681"                    ## C-C chemokine receptor type 5
        #     oneOutput: "PUBCHEM.COMPOUND:44401763"        ## (2R)-3-cyclobutyl-2-[(3S,4S)-3-phenyl-4-[[4-([1,2,4]triazolo[4,3-a]pyridin-3-yl)piperidin-1-yl]methyl]pyrrolidin-1-yl]propanoic acid 
    ligand-protein:
      - supportBatch: true
        useTemplating: true
        inputs:
          - id: "PUBCHEM.COMPOUND"
            semantic: SmallMolecule
        requestBody:
          body:
            q: "{{ queryInputs }}"
            scopes: object.pubchem_cid
        outputs:
          - id: UniProtKB
            semantic: Gene
        parameters:
          fields: >-
            subject.uniprot.accession,
            subject.name,subject.organism,
            relation.curation_datasource,relation.pmid,relation.bindingdb_link,relation.article_doi,relation.patent_number
          size: 1000
        predicate: physically_interacts_with
        source: "infores:bindingdb"
        response_mapping:
          "$ref": "#/components/x-bte-response-mapping/uniprot-subject"
        # testExamples:
        #   - qInput: "PUBCHEM.COMPOUND:134553288"     ## US10736883, Example 387.0
        #     oneOutput: "UniProtKB:P35414"            ## Apelin receptor
  x-bte-response-mapping:
    pubchem-object:
      "PUBCHEM.COMPOUND": object.pubchem_cid       ## no prefix
      "biolink:original_subject": subject.name     ## was called "Target Name Assigned by Curator or DataSource"
      in_taxon: subject.organism                 ## was called "Target Source Organism According to Curator or DataSource"
      bindingdb_curation_datasource: relation.curation_datasource    ## Curation/DataSource
      pubmed: relation.pmid
      "biolink:source_web_page": relation.bindingdb_link
      article_doi: relation.article_doi
      patent_number: relation.patent_number
    uniprot-subject:
      UniProtKB: subject.uniprot.accession  ## no prefix
      "biolink:original_subject": subject.name
      in_taxon: subject.organism
      bindingdb_curation_datasource: relation.curation_datasource
      pubmed: relation.pmid
      "biolink:source_web_page": relation.bindingdb_link
      article_doi: relation.article_doi
      patent_number: relation.patent_number